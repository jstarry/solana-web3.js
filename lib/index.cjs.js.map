{"version":3,"file":"index.cjs.js","sources":["../src/publickey.js","../src/account.js","../src/timing.js","../src/layout.js","../src/util/shortvec-encoding.js","../src/transaction.js","../src/util/sleep.js","../src/connection.js","../src/util/send-and-confirm-transaction.js","../src/system-program.js","../src/loader.js","../src/bpf-loader.js","../src/budget-program.js","../src/native-loader.js","../src/token-program.js","../src/util/send-and-confirm-raw-transaction.js","../src/util/testnet.js"],"sourcesContent":["// @flow\n\nimport BN from 'bn.js';\nimport bs58 from 'bs58';\n\n/**\n * A public key\n */\nexport class PublicKey {\n  _bn: BN;\n\n  /**\n   * Create a new PublicKey object\n   */\n  constructor(value: number | string | Buffer | Array<number>) {\n    if (typeof value === 'string') {\n      // hexadecimal number\n      if (value.startsWith('0x')) {\n        this._bn = new BN(value.substring(2), 16);\n      } else {\n        // assume base 58 encoding by default\n        this._bn = new BN(bs58.decode(value));\n      }\n    } else {\n      this._bn = new BN(value);\n    }\n\n    if (this._bn.byteLength() > 32) {\n      throw new Error(`Invalid public key input`);\n    }\n  }\n\n  /**\n   * Checks if the provided object is a PublicKey\n   */\n  static isPublicKey(o: Object): boolean {\n    return o instanceof PublicKey;\n  }\n\n  /**\n   * Checks if two publicKeys are equal\n   */\n  equals(publicKey: PublicKey): boolean {\n    return this._bn.eq(publicKey._bn);\n  }\n\n  /**\n   * Return the base-58 representation of the public key\n   */\n  toBase58(): string {\n    return bs58.encode(this.toBuffer());\n  }\n\n  /**\n   * Return the Buffer representation of the public key\n   */\n  toBuffer(): Buffer {\n    const b = this._bn.toArrayLike(Buffer);\n    if (b.length === 32) {\n      return b;\n    }\n\n    const zeroPad = Buffer.alloc(32);\n    b.copy(zeroPad, 32 - b.length);\n    return zeroPad;\n  }\n\n  /**\n   * Returns a string representation of the public key\n   */\n  toString(): string {\n    return this.toBase58();\n  }\n}\nwindow.PublicKey = PublicKey;\n","// @flow\nimport nacl from 'tweetnacl';\nimport type {KeyPair} from 'tweetnacl';\n\nimport {PublicKey} from './publickey';\n\n/**\n * An account key pair (public and secret keys).\n */\nexport class Account {\n  _keypair: KeyPair;\n\n  /**\n   * Create a new Account object\n   *\n   * If the secretKey parameter is not provided a new key pair is randomly\n   * created for the account\n   *\n   * @param secretKey Secret key for the account\n   */\n  constructor(secretKey: ?Buffer = null) {\n    if (secretKey) {\n      this._keypair = nacl.sign.keyPair.fromSecretKey(secretKey);\n    } else {\n      this._keypair = nacl.sign.keyPair();\n    }\n  }\n\n  /**\n   * The public key for this account\n   */\n  get publicKey(): PublicKey {\n    return new PublicKey(this._keypair.publicKey);\n  }\n\n  /**\n   * The **unencrypted** secret key for this account\n   */\n  get secretKey(): Buffer {\n    return this._keypair.secretKey;\n  }\n}\n","// @flow\n\n// TODO: These constants should be removed in favor of reading them out of a\n// Syscall account\n\n/**\n * @ignore\n */\nexport const NUM_TICKS_PER_SECOND = 10;\n\n/**\n * @ignore\n */\nexport const DEFAULT_TICKS_PER_SLOT = 8;\n","// @flow\n\nimport * as BufferLayout from 'buffer-layout';\n\n/**\n * Layout for a public key\n */\nexport const publicKey = (property: string = 'publicKey'): Object => {\n  return BufferLayout.blob(32, property);\n};\n\n/**\n * Layout for a 64bit unsigned value\n */\nexport const uint64 = (property: string = 'uint64'): Object => {\n  return BufferLayout.blob(8, property);\n};\n\n/**\n * Layout for a Rust String type\n */\nexport const rustString = (property: string = 'string') => {\n  const rsl = BufferLayout.struct(\n    [\n      BufferLayout.u32('length'),\n      BufferLayout.u32('lengthPadding'),\n      BufferLayout.blob(BufferLayout.offset(BufferLayout.u32(), -8), 'chars'),\n    ],\n    property,\n  );\n  const _decode = rsl.decode.bind(rsl);\n  const _encode = rsl.encode.bind(rsl);\n\n  rsl.decode = (buffer, offset) => {\n    const data = _decode(buffer, offset);\n    return data.chars.toString('utf8');\n  };\n\n  rsl.encode = (str, buffer, offset) => {\n    const data = {\n      chars: Buffer.from(str, 'utf8'),\n    };\n    return _encode(data, buffer, offset);\n  };\n\n  return rsl;\n};\n","// @flow\n\nexport function decodeLength(bytes: Array<number>): number {\n  let len = 0;\n  let size = 0;\n  for (;;) {\n    let elem = bytes.shift();\n    len |= (elem & 0x7f) << (size * 7);\n    size += 1;\n    if ((elem & 0x80) === 0) {\n      break;\n    }\n  }\n  return len;\n}\n\nexport function encodeLength(bytes: Array<number>, len: number) {\n  let rem_len = len;\n  for (;;) {\n    let elem = rem_len & 0x7f;\n    rem_len >>= 7;\n    if (rem_len == 0) {\n      bytes.push(elem);\n      break;\n    } else {\n      elem |= 0x80;\n      bytes.push(elem);\n    }\n  }\n}\n","// @flow\n\nimport invariant from 'assert';\nimport * as BufferLayout from 'buffer-layout';\nimport nacl from 'tweetnacl';\nimport bs58 from 'bs58';\n\nimport * as Layout from './layout';\nimport {PublicKey} from './publickey';\nimport {Account} from './account';\nimport * as shortvec from './util/shortvec-encoding';\nimport type {Blockhash} from './blockhash';\n\n/**\n * @typedef {string} TransactionSignature\n */\nexport type TransactionSignature = string;\n\n/**\n * Maximum over-the-wire size of a Transaction\n *\n * 1280 is IPv6 minimum MTU\n * 40 bytes is the size of the IPv6 header\n * 8 bytes is the size of the fragment header\n */\nexport const PACKET_DATA_SIZE = 1280 - 40 - 8;\n\n/**\n * List of TransactionInstruction object fields that may be initialized at construction\n *\n * @typedef {Object} TransactionInstructionCtorFields\n * @property {?Array<PublicKey>} keys\n * @property {?PublicKey} programId\n * @property {?Buffer} data\n */\ntype TransactionInstructionCtorFields = {|\n  keys?: Array<{pubkey: PublicKey, isSigner: boolean, isDebitable: boolean}>,\n  programId?: PublicKey,\n  data?: Buffer,\n|};\n\n/**\n * Transaction Instruction class\n */\nexport class TransactionInstruction {\n  /**\n   * Public keys to include in this transaction\n   * Boolean represents whether this pubkey needs to sign the transaction\n   */\n  keys: Array<{\n    pubkey: PublicKey,\n    isSigner: boolean,\n    isDebitable: boolean,\n  }> = [];\n\n  /**\n   * Program Id to execute\n   */\n  programId: PublicKey;\n\n  /**\n   * Program input\n   */\n  data: Buffer = Buffer.alloc(0);\n\n  constructor(opts?: TransactionInstructionCtorFields) {\n    opts && Object.assign(this, opts);\n  }\n}\n\n/**\n * @private\n */\ntype SignaturePubkeyPair = {|\n  signature: Buffer | null,\n  publicKey: PublicKey,\n|};\n\n/**\n * List of Transaction object fields that may be initialized at construction\n *\n * @typedef {Object} TransactionCtorFields\n * @property (?recentBlockhash} A recent block hash\n * @property (?signatures} One or more signatures\n *\n */\ntype TransactionCtorFields = {|\n  recentBlockhash?: Blockhash | null,\n  signatures?: Array<SignaturePubkeyPair>,\n|};\n\n/**\n * Transaction class\n */\nexport class Transaction {\n  /**\n   * Signatures for the transaction.  Typically created by invoking the\n   * `sign()` method\n   */\n  signatures: Array<SignaturePubkeyPair> = [];\n\n  /**\n   * The first (payer) Transaction signature\n   */\n  get signature(): Buffer | null {\n    if (this.signatures.length > 0) {\n      return this.signatures[0].signature;\n    }\n    return null;\n  }\n\n  /**\n   * The instructions to atomically execute\n   */\n  instructions: Array<TransactionInstruction> = [];\n\n  /**\n   * A recent transaction id.  Must be populated by the caller\n   */\n  recentBlockhash: Blockhash | null;\n\n  /**\n   * Construct an empty Transaction\n   */\n  constructor(opts?: TransactionCtorFields) {\n    opts && Object.assign(this, opts);\n  }\n\n  /**\n   * Add one or more instructions to this Transaction\n   */\n  add(\n    ...items: Array<\n      Transaction | TransactionInstruction | TransactionInstructionCtorFields,\n    >\n  ): Transaction {\n    if (items.length === 0) {\n      throw new Error('No instructions');\n    }\n\n    items.forEach(item => {\n      if (item instanceof Transaction) {\n        this.instructions = this.instructions.concat(item.instructions);\n      } else if (item instanceof TransactionInstruction) {\n        this.instructions.push(item);\n      } else {\n        this.instructions.push(new TransactionInstruction(item));\n      }\n    });\n    return this;\n  }\n\n  /**\n   * @private\n   */\n  _getSignData(): Buffer {\n    const {recentBlockhash} = this;\n    if (!recentBlockhash) {\n      throw new Error('Transaction recentBlockhash required');\n    }\n\n    if (this.instructions.length < 1) {\n      throw new Error('No instructions provided');\n    }\n\n    const keys = this.signatures.map(({publicKey}) => publicKey.toString());\n    let numRequiredSignatures = 0;\n    let numCreditOnlySignedAccounts = 0;\n    let numCreditOnlyUnsignedAccounts = 0;\n\n    const programIds = [];\n\n    this.instructions.forEach(instruction => {\n      instruction.keys.forEach(keySignerPair => {\n        const keyStr = keySignerPair.pubkey.toString();\n        if (!keys.includes(keyStr)) {\n          if (keySignerPair.isSigner) {\n            numRequiredSignatures += 1;\n            if (!keySignerPair.isDebitable) {\n              numCreditOnlySignedAccounts += 1;\n            }\n          } else {\n            if (!keySignerPair.isDebitable) {\n              numCreditOnlyUnsignedAccounts += 1;\n            }\n          }\n          keys.push(keyStr);\n        }\n      });\n\n      const programId = instruction.programId.toString();\n      if (!programIds.includes(programId)) {\n        programIds.push(programId);\n      }\n    });\n\n    programIds.forEach(programId => {\n      if (!keys.includes(programId)) {\n        keys.push(programId);\n        numCreditOnlyUnsignedAccounts += 1;\n      }\n    });\n\n    if (numRequiredSignatures > this.signatures.length) {\n      throw new Error(\n        `Insufficent signatures: expected ${numRequiredSignatures} but got ${\n          this.signatures.length\n        }`,\n      );\n    }\n\n    let keyCount = [];\n    shortvec.encodeLength(keyCount, keys.length);\n\n    const instructions = this.instructions.map(instruction => {\n      const {data, programId} = instruction;\n      let keyIndicesCount = [];\n      shortvec.encodeLength(keyIndicesCount, instruction.keys.length);\n      let dataCount = [];\n      shortvec.encodeLength(dataCount, instruction.data.length);\n      return {\n        programIdIndex: keys.indexOf(programId.toString()),\n        keyIndicesCount: Buffer.from(keyIndicesCount),\n        keyIndices: Buffer.from(\n          instruction.keys.map(keyObj =>\n            keys.indexOf(keyObj.pubkey.toString()),\n          ),\n        ),\n        dataLength: Buffer.from(dataCount),\n        data,\n      };\n    });\n\n    instructions.forEach(instruction => {\n      invariant(instruction.programIdIndex >= 0);\n      instruction.keyIndices.forEach(keyIndex => invariant(keyIndex >= 0));\n    });\n\n    let instructionCount = [];\n    shortvec.encodeLength(instructionCount, instructions.length);\n    let instructionBuffer = Buffer.alloc(PACKET_DATA_SIZE);\n    Buffer.from(instructionCount).copy(instructionBuffer);\n    let instructionBufferLength = instructionCount.length;\n\n    instructions.forEach(instruction => {\n      const instructionLayout = BufferLayout.struct([\n        BufferLayout.u8('programIdIndex'),\n\n        BufferLayout.blob(\n          instruction.keyIndicesCount.length,\n          'keyIndicesCount',\n        ),\n        BufferLayout.seq(\n          BufferLayout.u8('keyIndex'),\n          instruction.keyIndices.length,\n          'keyIndices',\n        ),\n        BufferLayout.blob(instruction.dataLength.length, 'dataLength'),\n        BufferLayout.seq(\n          BufferLayout.u8('userdatum'),\n          instruction.data.length,\n          'data',\n        ),\n      ]);\n      const length = instructionLayout.encode(\n        instruction,\n        instructionBuffer,\n        instructionBufferLength,\n      );\n      instructionBufferLength += length;\n    });\n    instructionBuffer = instructionBuffer.slice(0, instructionBufferLength);\n\n    const signDataLayout = BufferLayout.struct([\n      BufferLayout.blob(1, 'numRequiredSignatures'),\n      BufferLayout.blob(1, 'numCreditOnlySignedAccounts'),\n      BufferLayout.blob(1, 'numCreditOnlyUnsignedAccounts'),\n      BufferLayout.blob(keyCount.length, 'keyCount'),\n      BufferLayout.seq(Layout.publicKey('key'), keys.length, 'keys'),\n      Layout.publicKey('recentBlockhash'),\n    ]);\n\n    const transaction = {\n      numRequiredSignatures: Buffer.from([this.signatures.length]),\n      numCreditOnlySignedAccounts: Buffer.from([numCreditOnlySignedAccounts]),\n      numCreditOnlyUnsignedAccounts: Buffer.from([\n        numCreditOnlyUnsignedAccounts,\n      ]),\n      keyCount: Buffer.from(keyCount),\n      keys: keys.map(key => new PublicKey(key).toBuffer()),\n      recentBlockhash: Buffer.from(bs58.decode(recentBlockhash)),\n    };\n\n    let signData = Buffer.alloc(2048);\n    const length = signDataLayout.encode(transaction, signData);\n    instructionBuffer.copy(signData, length);\n    signData = signData.slice(0, length + instructionBuffer.length);\n\n    return signData;\n  }\n\n  /**\n   * Sign the Transaction with the specified accounts.  Multiple signatures may\n   * be applied to a Transaction. The first signature is considered \"primary\"\n   * and is used when testing for Transaction confirmation.\n   *\n   * Transaction fields should not be modified after the first call to `sign`,\n   * as doing so may invalidate the signature and cause the Transaction to be\n   * rejected.\n   *\n   * The Transaction must be assigned a valid `recentBlockhash` before invoking this method\n   */\n  sign(...signers: Array<Account>) {\n    this.signPartial(...signers);\n  }\n\n  /**\n   * Partially sign a Transaction with the specified accounts.  The `Account`\n   * inputs will be used to sign the Transaction immediately, while any\n   * `PublicKey` inputs will be referenced in the signed Transaction but need to\n   * be filled in later by calling `addSigner()` with the matching `Account`.\n   *\n   * All the caveats from the `sign` method apply to `signPartial`\n   */\n  signPartial(...partialSigners: Array<PublicKey | Account>) {\n    if (partialSigners.length === 0) {\n      throw new Error('No signers');\n    }\n    const signatures: Array<SignaturePubkeyPair> = partialSigners.map(\n      accountOrPublicKey => {\n        const publicKey =\n          accountOrPublicKey instanceof Account\n            ? accountOrPublicKey.publicKey\n            : accountOrPublicKey;\n        return {\n          signature: null,\n          publicKey,\n        };\n      },\n    );\n    this.signatures = signatures;\n    const signData = this._getSignData();\n\n    partialSigners.forEach((accountOrPublicKey, index) => {\n      if (accountOrPublicKey instanceof PublicKey) {\n        return;\n      }\n      const signature = nacl.sign.detached(\n        signData,\n        accountOrPublicKey.secretKey,\n      );\n      invariant(signature.length === 64);\n      signatures[index].signature = Buffer.from(signature);\n    });\n  }\n\n  /**\n   * Fill in a signature for a partially signed Transaction.  The `signer` must\n   * be the corresponding `Account` for a `PublicKey` that was previously provided to\n   * `signPartial`\n   */\n  addSigner(signer: Account) {\n    const index = this.signatures.findIndex(sigpair =>\n      signer.publicKey.equals(sigpair.publicKey),\n    );\n    if (index < 0) {\n      throw new Error(`Unknown signer: ${signer.publicKey.toString()}`);\n    }\n\n    const signData = this._getSignData();\n    const signature = nacl.sign.detached(signData, signer.secretKey);\n    invariant(signature.length === 64);\n    this.signatures[index].signature = Buffer.from(signature);\n  }\n\n  /**\n   * Serialize the Transaction in the wire format.\n   *\n   * The Transaction must have a valid `signature` before invoking this method\n   */\n  serialize(): Buffer {\n    const {signatures} = this;\n    if (!signatures) {\n      throw new Error('Transaction has not been signed');\n    }\n\n    const signData = this._getSignData();\n    const signatureCount = [];\n    shortvec.encodeLength(signatureCount, signatures.length);\n    const transactionLength =\n      signatureCount.length + signatures.length * 64 + signData.length;\n    const wireTransaction = Buffer.alloc(transactionLength);\n    invariant(signatures.length < 256);\n    Buffer.from(signatureCount).copy(wireTransaction, 0);\n    signatures.forEach(({signature}, index) => {\n      invariant(signature !== null, `null signature`);\n      invariant(signature.length === 64, `signature has invalid length`);\n      Buffer.from(signature).copy(\n        wireTransaction,\n        signatureCount.length + index * 64,\n      );\n    });\n    signData.copy(\n      wireTransaction,\n      signatureCount.length + signatures.length * 64,\n    );\n    invariant(\n      wireTransaction.length <= PACKET_DATA_SIZE,\n      `Transaction too large: ${wireTransaction.length} > ${PACKET_DATA_SIZE}`,\n    );\n    return wireTransaction;\n  }\n\n  /**\n   * Deprecated method\n   * @private\n   */\n  get keys(): Array<PublicKey> {\n    invariant(this.instructions.length === 1);\n    return this.instructions[0].keys.map(keyObj => keyObj.pubkey);\n  }\n\n  /**\n   * Deprecated method\n   * @private\n   */\n  get programId(): PublicKey {\n    invariant(this.instructions.length === 1);\n    return this.instructions[0].programId;\n  }\n\n  /**\n   * Deprecated method\n   * @private\n   */\n  get data(): Buffer {\n    invariant(this.instructions.length === 1);\n    return this.instructions[0].data;\n  }\n\n  /**\n   * Parse a wire transaction into a Transaction object.\n   */\n  static from(buffer: Buffer): Transaction {\n    const PUBKEY_LENGTH = 32;\n    const SIGNATURE_LENGTH = 64;\n\n    function isCreditDebit(\n      i: number,\n      numRequiredSignatures: number,\n      numCreditOnlySignedAccounts: number,\n      numCreditOnlyUnsignedAccounts: number,\n      numKeys: number,\n    ): boolean {\n      return (\n        i < numRequiredSignatures - numCreditOnlySignedAccounts ||\n        (i >= numRequiredSignatures &&\n          i < numKeys - numCreditOnlyUnsignedAccounts)\n      );\n    }\n\n    let transaction = new Transaction();\n\n    // Slice up wire data\n    let byteArray = [...buffer];\n\n    const signatureCount = shortvec.decodeLength(byteArray);\n    let signatures = [];\n    for (let i = 0; i < signatureCount; i++) {\n      const signature = byteArray.slice(0, SIGNATURE_LENGTH);\n      byteArray = byteArray.slice(SIGNATURE_LENGTH);\n      signatures.push(signature);\n    }\n\n    const numRequiredSignatures = byteArray.shift();\n    // byteArray = byteArray.slice(1); // Skip numRequiredSignatures byte\n    const numCreditOnlySignedAccounts = byteArray.shift();\n    // byteArray = byteArray.slice(1); // Skip numCreditOnlySignedAccounts byte\n    const numCreditOnlyUnsignedAccounts = byteArray.shift();\n    // byteArray = byteArray.slice(1); // Skip numCreditOnlyUnsignedAccounts byte\n\n    const accountCount = shortvec.decodeLength(byteArray);\n    let accounts = [];\n    for (let i = 0; i < accountCount; i++) {\n      const account = byteArray.slice(0, PUBKEY_LENGTH);\n      byteArray = byteArray.slice(PUBKEY_LENGTH);\n      accounts.push(account);\n    }\n\n    const recentBlockhash = byteArray.slice(0, PUBKEY_LENGTH);\n    byteArray = byteArray.slice(PUBKEY_LENGTH);\n\n    const instructionCount = shortvec.decodeLength(byteArray);\n    let instructions = [];\n    for (let i = 0; i < instructionCount; i++) {\n      let instruction = {};\n      instruction.programIndex = byteArray.shift();\n      const accountIndexCount = shortvec.decodeLength(byteArray);\n      instruction.accountIndex = byteArray.slice(0, accountIndexCount);\n      byteArray = byteArray.slice(accountIndexCount);\n      const dataLength = shortvec.decodeLength(byteArray);\n      instruction.data = byteArray.slice(0, dataLength);\n      byteArray = byteArray.slice(dataLength);\n      instructions.push(instruction);\n    }\n\n    // Populate Transaction object\n    transaction.recentBlockhash = new PublicKey(recentBlockhash).toBase58();\n    for (let i = 0; i < signatureCount; i++) {\n      const sigPubkeyPair = {\n        signature: Buffer.from(signatures[i]),\n        publicKey: new PublicKey(accounts[i]),\n      };\n      transaction.signatures.push(sigPubkeyPair);\n    }\n    for (let i = 0; i < instructionCount; i++) {\n      let instructionData = {\n        keys: [],\n        programId: new PublicKey(accounts[instructions[i].programIndex]),\n        data: Buffer.from(instructions[i].data),\n      };\n      for (let j = 0; j < instructions[i].accountIndex.length; j++) {\n        const pubkey = new PublicKey(accounts[instructions[i].accountIndex[j]]);\n\n        instructionData.keys.push({\n          pubkey,\n          isSigner: transaction.signatures.some(\n            keyObj => keyObj.publicKey.toString() === pubkey.toString(),\n          ),\n          isDebitable: isCreditDebit(\n            j,\n            numRequiredSignatures,\n            numCreditOnlySignedAccounts,\n            numCreditOnlyUnsignedAccounts,\n            accounts.length,\n          ),\n        });\n      }\n      let instruction = new TransactionInstruction(instructionData);\n      transaction.instructions.push(instruction);\n    }\n    return transaction;\n  }\n}\n","// @flow\n\n// zzz\nexport function sleep(ms: number): Promise<void> {\n  return new Promise(resolve => setTimeout(resolve, ms));\n}\n","// @flow\n\nimport assert from 'assert';\nimport {parse as urlParse, format as urlFormat} from 'url';\nimport fetch from 'node-fetch';\nimport jayson from 'jayson/lib/client/browser';\nimport {struct} from 'superstruct';\nimport {Client as RpcWebSocketClient} from 'rpc-websockets';\n\nimport {DEFAULT_TICKS_PER_SLOT, NUM_TICKS_PER_SECOND} from './timing';\nimport {PublicKey} from './publickey';\nimport {Transaction} from './transaction';\nimport {sleep} from './util/sleep';\nimport type {Blockhash} from './blockhash';\nimport type {FeeCalculator} from './fee-calculator';\nimport type {Account} from './account';\nimport type {TransactionSignature} from './transaction';\n\ntype RpcRequest = (methodName: string, args: Array<any>) => any;\n\n/**\n * Information describing a cluster node\n *\n * @typedef {Object} ContactInfo\n * @property {string} pubkey Identity public key of the node\n * @property {string} gossip Gossip network address for the node\n * @property {string} tpu TPU network address for the node (null if not available)\n * @property {string|null} rpc JSON RPC network address for the node (null if not available)\n */\ntype ContactInfo = {\n  pubkey: string,\n  gossip: string,\n  tpu: string | null,\n  rpc: string | null,\n};\n\n/**\n * Information describing a vote account\n *\n * @typedef {Object} VoteAccountInfo\n * @property {string} votePubkey Public key of the vote account\n * @property {string} nodePubkey Identity public key of the node voting with this account\n * @property {string} stake The stake, in lamports, delegated to this vote account\n * @property {string} commission A 32-bit integer used as a fraction (commission/0xFFFFFFFF) for rewards payout\n */\ntype VoteAccountInfo = {\n  votePubkey: string,\n  nodePubkey: string,\n  stake: number,\n  commission: number,\n};\n\nfunction createRpcRequest(url): RpcRequest {\n  const server = jayson(async (request, callback) => {\n    const options = {\n      method: 'POST',\n      body: request,\n      headers: {\n        'Content-Type': 'application/json',\n      },\n    };\n\n    try {\n      const res = await fetch(url, options);\n      const text = await res.text();\n      callback(null, text);\n    } catch (err) {\n      callback(err);\n    }\n  });\n\n  return (method, args) => {\n    return new Promise((resolve, reject) => {\n      server.request(method, args, (err, response) => {\n        if (err) {\n          reject(err);\n          return;\n        }\n        resolve(response);\n      });\n    });\n  };\n}\n\n/**\n * Expected JSON RPC response for the \"getBalance\" message\n */\nconst GetBalanceRpcResult = struct({\n  jsonrpc: struct.literal('2.0'),\n  id: 'string',\n  error: 'any?',\n  result: 'number?',\n});\n\n/**\n * @private\n */\nfunction jsonRpcResult(resultDescription: any) {\n  const jsonRpcVersion = struct.literal('2.0');\n  return struct.union([\n    struct({\n      jsonrpc: jsonRpcVersion,\n      id: 'string',\n      error: 'any',\n    }),\n    struct({\n      jsonrpc: jsonRpcVersion,\n      id: 'string',\n      error: 'null?',\n      result: resultDescription,\n    }),\n  ]);\n}\n\n/**\n * @private\n */\nconst AccountInfoResult = struct({\n  executable: 'boolean',\n  owner: 'array',\n  lamports: 'number',\n  data: 'array',\n});\n\n/**\n * Expected JSON RPC response for the \"getAccountInfo\" message\n */\nconst GetAccountInfoRpcResult = jsonRpcResult(AccountInfoResult);\n\n/***\n * Expected JSON RPC response for the \"accountNotification\" message\n */\nconst AccountNotificationResult = struct({\n  subscription: 'number',\n  result: AccountInfoResult,\n});\n\n/**\n * @private\n */\nconst ProgramAccountInfoResult = struct(['string', AccountInfoResult]);\n\n/***\n * Expected JSON RPC response for the \"programNotification\" message\n */\nconst ProgramAccountNotificationResult = struct({\n  subscription: 'number',\n  result: ProgramAccountInfoResult,\n});\n\n/**\n * Expected JSON RPC response for the \"confirmTransaction\" message\n */\nconst ConfirmTransactionRpcResult = jsonRpcResult('boolean');\n\n/**\n * Expected JSON RPC response for the \"getSlotLeader\" message\n */\nconst GetSlotLeader = jsonRpcResult('string');\n\n/**\n * Expected JSON RPC response for the \"getClusterNodes\" message\n */\nconst GetClusterNodes = jsonRpcResult(\n  struct.list([\n    struct({\n      pubkey: 'string',\n      gossip: 'string',\n      tpu: struct.union(['null', 'string']),\n      rpc: struct.union(['null', 'string']),\n    }),\n  ]),\n);\n/**\n * @ignore\n */\nconst GetClusterNodes_015 = jsonRpcResult(\n  struct.list([\n    struct({\n      id: 'string',\n      gossip: 'string',\n      tpu: struct.union(['null', 'string']),\n      rpc: struct.union(['null', 'string']),\n    }),\n  ]),\n);\n\n/**\n * Expected JSON RPC response for the \"getEpochVoteAccounts\" message\n */\nconst GetEpochVoteAccounts = jsonRpcResult(\n  struct.list([\n    struct({\n      votePubkey: 'string',\n      nodePubkey: 'string',\n      stake: 'number',\n      commission: 'number',\n    }),\n  ]),\n);\n\n/**\n * Expected JSON RPC response for the \"getSignatureStatus\" message\n */\nconst GetSignatureStatusRpcResult = jsonRpcResult(\n  struct.union([\n    'null',\n    struct.union([struct({Ok: 'null'}), struct({Err: 'object'})]),\n  ]),\n);\n\n/**\n * Expected JSON RPC response for the \"getTransactionCount\" message\n */\nconst GetTransactionCountRpcResult = jsonRpcResult('number');\n\n/**\n * Expected JSON RPC response for the \"getRecentBlockhash\" message\n */\nconst GetRecentBlockhash = jsonRpcResult([\n  'string',\n  struct({\n    lamportsPerSignature: 'number',\n    maxLamportsPerSignature: 'number',\n    minLamportsPerSignature: 'number',\n    targetLamportsPerSignature: 'number',\n    targetSignaturesPerSlot: 'number',\n  }),\n]);\n/**\n * @ignore\n */\nconst GetRecentBlockhash_015 = jsonRpcResult([\n  'string',\n  struct({\n    lamportsPerSignature: 'number',\n  }),\n]);\n\n/**\n * Expected JSON RPC response for the \"requestAirdrop\" message\n */\nconst RequestAirdropRpcResult = jsonRpcResult('string');\n\n/**\n * Expected JSON RPC response for the \"sendTransaction\" message\n */\nconst SendTransactionRpcResult = jsonRpcResult('string');\n\n/**\n * Information describing an account\n *\n * @typedef {Object} AccountInfo\n * @property {number} lamports Number of lamports assigned to the account\n * @property {PublicKey} owner Identifier of the program that owns the account\n * @property {?Buffer} data Optional data assigned to the account\n * @property {boolean} executable `true` if this account's data contains a loaded program\n */\ntype AccountInfo = {\n  executable: boolean,\n  owner: PublicKey,\n  lamports: number,\n  data: Buffer,\n};\n\n/**\n * Account information identified by pubkey\n *\n * @typedef {Object} KeyedAccountInfo\n * @property {PublicKey} accountId\n * @property {AccountInfo} accountInfo\n */\ntype KeyedAccountInfo = {\n  accountId: PublicKey,\n  accountInfo: AccountInfo,\n};\n\n/**\n * Callback function for account change notifications\n */\nexport type AccountChangeCallback = (accountInfo: AccountInfo) => void;\n\n/**\n * @private\n */\ntype AccountSubscriptionInfo = {\n  publicKey: string, // PublicKey of the account as a base 58 string\n  callback: AccountChangeCallback,\n  subscriptionId: null | number, // null when there's no current server subscription id\n};\n\n/**\n * Callback function for program account change notifications\n */\nexport type ProgramAccountChangeCallback = (\n  keyedAccountInfo: KeyedAccountInfo,\n) => void;\n\n/**\n * @private\n */\ntype ProgramAccountSubscriptionInfo = {\n  programId: string, // PublicKey of the program as a base 58 string\n  callback: ProgramAccountChangeCallback,\n  subscriptionId: null | number, // null when there's no current server subscription id\n};\n\n/**\n * Signature status: Success\n *\n * @typedef {Object} SignatureSuccess\n */\nexport type SignatureSuccess = {|\n  Ok: null,\n|};\n\n/**\n * Signature status: TransactionError\n *\n * @typedef {Object} TransactionError\n */\nexport type TransactionError = {|\n  Err: Object,\n|};\n\n/**\n * @ignore\n */\ntype BlockhashAndFeeCalculator = [Blockhash, FeeCalculator]; // This type exists to workaround an esdoc parse error\n\n/**\n * A connection to a fullnode JSON RPC endpoint\n */\nexport class Connection {\n  _rpcRequest: RpcRequest;\n  _rpcWebSocket: RpcWebSocketClient;\n  _rpcWebSocketConnected: boolean = false;\n\n  _blockhashInfo: {\n    recentBlockhash: Blockhash | null,\n    seconds: number,\n    transactionSignatures: Array<string>,\n  };\n  _disableBlockhashCaching: boolean = false;\n  _accountChangeSubscriptions: {[number]: AccountSubscriptionInfo} = {};\n  _accountChangeSubscriptionCounter: number = 0;\n  _programAccountChangeSubscriptions: {\n    [number]: ProgramAccountSubscriptionInfo,\n  } = {};\n  _programAccountChangeSubscriptionCounter: number = 0;\n\n  /**\n   * Establish a JSON RPC connection\n   *\n   * @param endpoint URL to the fullnode JSON RPC endpoint\n   */\n  constructor(endpoint: string) {\n    let url = urlParse(endpoint);\n\n    this._rpcRequest = createRpcRequest(url.href);\n    this._blockhashInfo = {\n      recentBlockhash: null,\n      seconds: -1,\n      transactionSignatures: [],\n    };\n\n    url.protocol = url.protocol === 'https:' ? 'wss:' : 'ws:';\n    url.host = '';\n    url.port = String(Number(url.port) + 1);\n    if (url.port === '1') {\n      url.port = url.protocol === 'wss:' ? '8901' : '8900';\n    }\n    this._rpcWebSocket = new RpcWebSocketClient(urlFormat(url), {\n      autoconnect: false,\n      max_reconnects: Infinity,\n    });\n    this._rpcWebSocket.on('open', this._wsOnOpen.bind(this));\n    this._rpcWebSocket.on('error', this._wsOnError.bind(this));\n    this._rpcWebSocket.on('close', this._wsOnClose.bind(this));\n    this._rpcWebSocket.on(\n      'accountNotification',\n      this._wsOnAccountNotification.bind(this),\n    );\n    this._rpcWebSocket.on(\n      'programNotification',\n      this._wsOnProgramAccountNotification.bind(this),\n    );\n  }\n\n  /**\n   * Fetch the balance for the specified public key\n   */\n  async getBalance(publicKey: PublicKey): Promise<number> {\n    const unsafeRes = await this._rpcRequest('getBalance', [\n      publicKey.toBase58(),\n    ]);\n    const res = GetBalanceRpcResult(unsafeRes);\n    if (res.error) {\n      throw new Error(res.error.message);\n    }\n    assert(typeof res.result !== 'undefined');\n    return res.result;\n  }\n\n  /**\n   * Fetch all the account info for the specified public key\n   */\n  async getAccountInfo(publicKey: PublicKey): Promise<AccountInfo> {\n    const unsafeRes = await this._rpcRequest('getAccountInfo', [\n      publicKey.toBase58(),\n    ]);\n    const res = GetAccountInfoRpcResult(unsafeRes);\n    if (res.error) {\n      throw new Error(res.error.message);\n    }\n\n    const {result} = res;\n    assert(typeof result !== 'undefined');\n\n    return {\n      executable: result.executable,\n      owner: result.owner,\n      lamports: result.lamports,\n      data: result.data,\n    };\n  }\n\n  /**\n   * Confirm the transaction identified by the specified signature\n   */\n  async confirmTransaction(signature: TransactionSignature): Promise<boolean> {\n    const unsafeRes = await this._rpcRequest('confirmTransaction', [signature]);\n    const res = ConfirmTransactionRpcResult(unsafeRes);\n    if (res.error) {\n      throw new Error(res.error.message);\n    }\n    assert(typeof res.result !== 'undefined');\n    return res.result;\n  }\n\n  /**\n   * Return the list of nodes that are currently participating in the cluster\n   */\n  async getClusterNodes(): Promise<Array<ContactInfo>> {\n    const unsafeRes = await this._rpcRequest('getClusterNodes', []);\n\n    // Legacy v0.15 response.  TODO: Remove in August 2019\n    try {\n      const res_015 = GetClusterNodes_015(unsafeRes);\n      if (res_015.error) {\n        console.log('no', res_015.error);\n        throw new Error(res_015.error.message);\n      }\n      return res_015.result.map(node => {\n        node.pubkey = node.id;\n        node.id = undefined;\n        return node;\n      });\n    } catch (e) {\n      // Not legacy format\n    }\n    // End Legacy v0.15 response\n\n    const res = GetClusterNodes(unsafeRes);\n    if (res.error) {\n      throw new Error(res.error.message);\n    }\n    assert(typeof res.result !== 'undefined');\n    return res.result;\n  }\n\n  /**\n   * Return the list of nodes that are currently participating in the cluster\n   */\n  async getEpochVoteAccounts(): Promise<Array<VoteAccountInfo>> {\n    const unsafeRes = await this._rpcRequest('getEpochVoteAccounts', []);\n    const res = GetEpochVoteAccounts(unsafeRes);\n    //const res = unsafeRes;\n    if (res.error) {\n      throw new Error(res.error.message);\n    }\n    assert(typeof res.result !== 'undefined');\n    return res.result;\n  }\n\n  /**\n   * Fetch the current slot leader of the cluster\n   */\n  async getSlotLeader(): Promise<string> {\n    const unsafeRes = await this._rpcRequest('getSlotLeader', []);\n    const res = GetSlotLeader(unsafeRes);\n    if (res.error) {\n      throw new Error(res.error.message);\n    }\n    assert(typeof res.result !== 'undefined');\n    return res.result;\n  }\n\n  /**\n   * Fetch the current transaction count of the cluster\n   */\n  async getSignatureStatus(\n    signature: TransactionSignature,\n  ): Promise<SignatureSuccess | TransactionError | null> {\n    const unsafeRes = await this._rpcRequest('getSignatureStatus', [signature]);\n    const res = GetSignatureStatusRpcResult(unsafeRes);\n    if (res.error) {\n      throw new Error(res.error.message);\n    }\n    assert(typeof res.result !== 'undefined');\n    return res.result;\n  }\n\n  /**\n   * Fetch the current transaction count of the cluster\n   */\n  async getTransactionCount(): Promise<number> {\n    const unsafeRes = await this._rpcRequest('getTransactionCount', []);\n    const res = GetTransactionCountRpcResult(unsafeRes);\n    if (res.error) {\n      throw new Error(res.error.message);\n    }\n    assert(typeof res.result !== 'undefined');\n    return Number(res.result);\n  }\n\n  /**\n   * Fetch a recent blockhash from the cluster\n   */\n  async getRecentBlockhash(): Promise<BlockhashAndFeeCalculator> {\n    const unsafeRes = await this._rpcRequest('getRecentBlockhash', []);\n\n    // Legacy v0.15 response.  TODO: Remove in August 2019\n    try {\n      const res_015 = GetRecentBlockhash_015(unsafeRes);\n      if (res_015.error) {\n        throw new Error(res_015.error.message);\n      }\n      const [blockhash, feeCalculator] = res_015.result;\n      feeCalculator.targetSignaturesPerSlot = 42;\n      feeCalculator.targetLamportsPerSignature =\n        feeCalculator.lamportsPerSignature;\n\n      return [blockhash, feeCalculator];\n    } catch (e) {\n      // Not legacy format\n    }\n    // End Legacy v0.15 response\n\n    const res = GetRecentBlockhash(unsafeRes);\n    if (res.error) {\n      throw new Error(res.error.message);\n    }\n    assert(typeof res.result !== 'undefined');\n    return res.result;\n  }\n\n  /**\n   * Request an allocation of lamports to the specified account\n   */\n  async requestAirdrop(\n    to: PublicKey,\n    amount: number,\n  ): Promise<TransactionSignature> {\n    const unsafeRes = await this._rpcRequest('requestAirdrop', [\n      to.toBase58(),\n      amount,\n    ]);\n    const res = RequestAirdropRpcResult(unsafeRes);\n    if (res.error) {\n      throw new Error(res.error.message);\n    }\n    assert(typeof res.result !== 'undefined');\n    return res.result;\n  }\n\n  /**\n   * Sign and send a transaction\n   */\n  async sendTransaction(\n    transaction: Transaction,\n    ...signers: Array<Account>\n  ): Promise<TransactionSignature> {\n    for (;;) {\n      // Attempt to use a recent blockhash for up to 30 seconds\n      const seconds = new Date().getSeconds();\n      if (\n        this._blockhashInfo.recentBlockhash != null &&\n        this._blockhashInfo.seconds < seconds + 30\n      ) {\n        transaction.recentBlockhash = this._blockhashInfo.recentBlockhash;\n        transaction.sign(...signers);\n        if (!transaction.signature) {\n          throw new Error('!signature'); // should never happen\n        }\n\n        // If the signature of this transaction has not been seen before with the\n        // current recentBlockhash, all done.\n        const signature = transaction.signature.toString();\n        if (!this._blockhashInfo.transactionSignatures.includes(signature)) {\n          this._blockhashInfo.transactionSignatures.push(signature);\n          if (this._disableBlockhashCaching) {\n            this._blockhashInfo.seconds = -1;\n          }\n          break;\n        }\n      }\n\n      // Fetch a new blockhash\n      let attempts = 0;\n      const startTime = Date.now();\n      for (;;) {\n        const [\n          recentBlockhash,\n          //feeCalculator,\n        ] = await this.getRecentBlockhash();\n\n        if (this._blockhashInfo.recentBlockhash != recentBlockhash) {\n          this._blockhashInfo = {\n            recentBlockhash,\n            seconds: new Date().getSeconds(),\n            transactionSignatures: [],\n          };\n          break;\n        }\n        if (attempts === 50) {\n          throw new Error(\n            `Unable to obtain a new blockhash after ${Date.now() -\n              startTime}ms`,\n          );\n        }\n\n        // Sleep for approximately half a slot\n        await sleep((500 * DEFAULT_TICKS_PER_SLOT) / NUM_TICKS_PER_SECOND);\n\n        ++attempts;\n      }\n    }\n\n    const wireTransaction = transaction.serialize();\n    return await this.sendRawTransaction(wireTransaction);\n  }\n\n  /**\n   * @private\n   */\n  async fullnodeExit(): Promise<boolean> {\n    const unsafeRes = await this._rpcRequest('fullnodeExit', []);\n    const res = jsonRpcResult('boolean')(unsafeRes);\n    if (res.error) {\n      throw new Error(res.error.message);\n    }\n    assert(typeof res.result !== 'undefined');\n    return res.result;\n  }\n\n  /**\n   * Send a transaction that has already been signed and serialized into the\n   * wire format\n   */\n  async sendRawTransaction(\n    rawTransaction: Buffer,\n  ): Promise<TransactionSignature> {\n    const unsafeRes = await this._rpcRequest('sendTransaction', [\n      [...rawTransaction],\n    ]);\n    const res = SendTransactionRpcResult(unsafeRes);\n    if (res.error) {\n      throw new Error(res.error.message);\n    }\n    assert(typeof res.result !== 'undefined');\n    assert(res.result);\n    return res.result;\n  }\n\n  /**\n   * @private\n   */\n  _wsOnOpen() {\n    this._rpcWebSocketConnected = true;\n    this._updateSubscriptions();\n  }\n\n  /**\n   * @private\n   */\n  _wsOnError(err: Error) {\n    console.log('ws error:', err.message);\n  }\n\n  /**\n   * @private\n   */\n  _wsOnClose(code: number, message: string) {\n    // 1000 means _rpcWebSocket.close() was called explicitly\n    if (code !== 1000) {\n      console.log('ws close:', code, message);\n    }\n    this._rpcWebSocketConnected = false;\n  }\n\n  /**\n   * @private\n   */\n  async _updateSubscriptions() {\n    const accountKeys = Object.keys(this._accountChangeSubscriptions).map(\n      Number,\n    );\n    const programKeys = Object.keys(\n      this._programAccountChangeSubscriptions,\n    ).map(Number);\n    if (accountKeys.length === 0 && programKeys.length === 0) {\n      this._rpcWebSocket.close();\n      return;\n    }\n\n    if (!this._rpcWebSocketConnected) {\n      for (let id of accountKeys) {\n        this._accountChangeSubscriptions[id].subscriptionId = null;\n      }\n      for (let id of programKeys) {\n        this._programAccountChangeSubscriptions[id].subscriptionId = null;\n      }\n      this._rpcWebSocket.connect();\n      return;\n    }\n\n    for (let id of accountKeys) {\n      const {subscriptionId, publicKey} = this._accountChangeSubscriptions[id];\n      if (subscriptionId === null) {\n        try {\n          this._accountChangeSubscriptions[\n            id\n          ].subscriptionId = await this._rpcWebSocket.call('accountSubscribe', [\n            publicKey,\n          ]);\n        } catch (err) {\n          console.log(\n            `accountSubscribe error for ${publicKey}: ${err.message}`,\n          );\n        }\n      }\n    }\n    for (let id of programKeys) {\n      const {\n        subscriptionId,\n        programId,\n      } = this._programAccountChangeSubscriptions[id];\n      if (subscriptionId === null) {\n        try {\n          this._programAccountChangeSubscriptions[\n            id\n          ].subscriptionId = await this._rpcWebSocket.call('programSubscribe', [\n            programId,\n          ]);\n        } catch (err) {\n          console.log(\n            `programSubscribe error for ${programId}: ${err.message}`,\n          );\n        }\n      }\n    }\n  }\n\n  /**\n   * @private\n   */\n  _wsOnAccountNotification(notification: Object) {\n    const res = AccountNotificationResult(notification);\n    if (res.error) {\n      throw new Error(res.error.message);\n    }\n\n    const keys = Object.keys(this._accountChangeSubscriptions).map(Number);\n    for (let id of keys) {\n      const sub = this._accountChangeSubscriptions[id];\n      if (sub.subscriptionId === res.subscription) {\n        const {result} = res;\n        assert(typeof result !== 'undefined');\n\n        sub.callback({\n          executable: result.executable,\n          owner: new PublicKey(result.owner),\n          lamports: result.lamports,\n          data: Buffer.from(result.data),\n        });\n        return true;\n      }\n    }\n  }\n\n  /**\n   * Register a callback to be invoked whenever the specified account changes\n   *\n   * @param publickey Public key of the account to monitor\n   * @param callback Function to invoke whenever the account is changed\n   * @return subscription id\n   */\n  onAccountChange(\n    publicKey: PublicKey,\n    callback: AccountChangeCallback,\n  ): number {\n    const id = ++this._accountChangeSubscriptionCounter;\n    this._accountChangeSubscriptions[id] = {\n      publicKey: publicKey.toBase58(),\n      callback,\n      subscriptionId: null,\n    };\n    this._updateSubscriptions();\n    return id;\n  }\n\n  /**\n   * Deregister an account notification callback\n   *\n   * @param id subscription id to deregister\n   */\n  async removeAccountChangeListener(id: number): Promise<void> {\n    if (this._accountChangeSubscriptions[id]) {\n      const {subscriptionId} = this._accountChangeSubscriptions[id];\n      delete this._accountChangeSubscriptions[id];\n      if (subscriptionId !== null) {\n        try {\n          await this._rpcWebSocket.call('accountUnsubscribe', [subscriptionId]);\n        } catch (err) {\n          console.log('accountUnsubscribe error:', err.message);\n        }\n      }\n      this._updateSubscriptions();\n    } else {\n      throw new Error(`Unknown account change id: ${id}`);\n    }\n  }\n\n  /**\n   * @private\n   */\n  _wsOnProgramAccountNotification(notification: Object) {\n    const res = ProgramAccountNotificationResult(notification);\n    if (res.error) {\n      throw new Error(res.error.message);\n    }\n\n    const keys = Object.keys(this._programAccountChangeSubscriptions).map(\n      Number,\n    );\n    for (let id of keys) {\n      const sub = this._programAccountChangeSubscriptions[id];\n      if (sub.subscriptionId === res.subscription) {\n        const {result} = res;\n        assert(typeof result !== 'undefined');\n\n        sub.callback({\n          accountId: result[0],\n          accountInfo: {\n            executable: result[1].executable,\n            owner: new PublicKey(result[1].owner),\n            lamports: result[1].lamports,\n            data: Buffer.from(result[1].data),\n          },\n        });\n        return true;\n      }\n    }\n  }\n\n  /**\n   * Register a callback to be invoked whenever accounts owned by the\n   * specified program change\n   *\n   * @param programId Public key of the program to monitor\n   * @param callback Function to invoke whenever the account is changed\n   * @return subscription id\n   */\n  onProgramAccountChange(\n    programId: PublicKey,\n    callback: ProgramAccountChangeCallback,\n  ): number {\n    const id = ++this._programAccountChangeSubscriptionCounter;\n    this._programAccountChangeSubscriptions[id] = {\n      programId: programId.toBase58(),\n      callback,\n      subscriptionId: null,\n    };\n    this._updateSubscriptions();\n    return id;\n  }\n\n  /**\n   * Deregister an account notification callback\n   *\n   * @param id subscription id to deregister\n   */\n  async removeProgramAccountChangeListener(id: number): Promise<void> {\n    if (this._programAccountChangeSubscriptions[id]) {\n      const {subscriptionId} = this._programAccountChangeSubscriptions[id];\n      delete this._programAccountChangeSubscriptions[id];\n      if (subscriptionId !== null) {\n        try {\n          await this._rpcWebSocket.call('programUnsubscribe', [subscriptionId]);\n        } catch (err) {\n          console.log('programUnsubscribe error:', err.message);\n        }\n      }\n      this._updateSubscriptions();\n    } else {\n      throw new Error(`Unknown account change id: ${id}`);\n    }\n  }\n}\nwindow.Connection = Connection;\n","// @flow\n\nimport invariant from 'assert';\n\nimport {Connection} from '../connection';\nimport {Transaction} from '../transaction';\nimport {sleep} from './sleep';\nimport type {Account} from '../account';\nimport type {TransactionSignature} from '../transaction';\nimport {DEFAULT_TICKS_PER_SLOT, NUM_TICKS_PER_SECOND} from '../timing';\n\n/**\n * Sign, send and confirm a transaction\n */\nexport async function sendAndConfirmTransaction(\n  connection: Connection,\n  transaction: Transaction,\n  ...signers: Array<Account>\n): Promise<TransactionSignature> {\n  let sendRetries = 10;\n  let signature;\n  for (;;) {\n    const start = Date.now();\n    signature = await connection.sendTransaction(transaction, ...signers);\n\n    // Wait up to a couple slots for a confirmation\n    let status = null;\n    let statusRetries = 6;\n    for (;;) {\n      status = await connection.getSignatureStatus(signature);\n      if (status) {\n        break;\n      }\n\n      if (--statusRetries <= 0) {\n        break;\n      }\n      // Sleep for approximately half a slot\n      await sleep((500 * DEFAULT_TICKS_PER_SLOT) / NUM_TICKS_PER_SECOND);\n    }\n\n    if (status && 'Ok' in status) {\n      break;\n    }\n    if (--sendRetries <= 0) {\n      const duration = (Date.now() - start) / 1000;\n      throw new Error(\n        `Transaction '${signature}' was not confirmed in ${duration.toFixed(\n          2,\n        )} seconds (${JSON.stringify(status)})`,\n      );\n    }\n\n    if (status && status.Err && !('AccountInUse' in status.Err)) {\n      throw new Error(\n        `Transaction ${signature} failed (${JSON.stringify(status)})`,\n      );\n    }\n\n    // Retry in 0..100ms to try to avoid another AccountInUse collision\n    await sleep(Math.random() * 100);\n  }\n\n  invariant(signature !== undefined);\n  return signature;\n}\n","// @flow\n\nimport * as BufferLayout from 'buffer-layout';\n\nimport {Transaction} from './transaction';\nimport {PublicKey} from './publickey';\nimport * as Layout from './layout';\n\n/**\n * Factory class for transactions to interact with the System program\n */\nexport class SystemProgram {\n  /**\n   * Public key that identifies the System program\n   */\n  static get programId(): PublicKey {\n    return new PublicKey(\n      '0x000000000000000000000000000000000000000000000000000000000000000',\n    );\n  }\n\n  /**\n   * Generate a Transaction that creates a new account\n   */\n  static createAccount(\n    from: PublicKey,\n    newAccount: PublicKey,\n    lamports: number,\n    space: number,\n    programId: PublicKey,\n  ): Transaction {\n    const dataLayout = BufferLayout.struct([\n      BufferLayout.u32('instruction'),\n      BufferLayout.ns64('lamports'),\n      BufferLayout.ns64('space'),\n      Layout.publicKey('programId'),\n    ]);\n\n    const data = Buffer.alloc(dataLayout.span);\n    dataLayout.encode(\n      {\n        instruction: 0, // Create Account instruction\n        lamports,\n        space,\n        programId: programId.toBuffer(),\n      },\n      data,\n    );\n\n    return new Transaction().add({\n      keys: [\n        {pubkey: from, isSigner: true, isDebitable: true},\n        {pubkey: newAccount, isSigner: false, isDebitable: true},\n      ],\n      programId: SystemProgram.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a Transaction that transfers lamports from one account to another\n   */\n  static transfer(from: PublicKey, to: PublicKey, amount: number): Transaction {\n    const dataLayout = BufferLayout.struct([\n      BufferLayout.u32('instruction'),\n      BufferLayout.ns64('amount'),\n    ]);\n\n    const data = Buffer.alloc(dataLayout.span);\n    dataLayout.encode(\n      {\n        instruction: 2, // Move instruction\n        amount,\n      },\n      data,\n    );\n\n    return new Transaction().add({\n      keys: [\n        {pubkey: from, isSigner: true, isDebitable: true},\n        {pubkey: to, isSigner: false, isDebitable: false},\n      ],\n      programId: SystemProgram.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a Transaction that assigns an account to a program\n   */\n  static assign(from: PublicKey, programId: PublicKey): Transaction {\n    const dataLayout = BufferLayout.struct([\n      BufferLayout.u32('instruction'),\n      Layout.publicKey('programId'),\n    ]);\n\n    const data = Buffer.alloc(dataLayout.span);\n    dataLayout.encode(\n      {\n        instruction: 1, // Assign instruction\n        programId: programId.toBuffer(),\n      },\n      data,\n    );\n\n    return new Transaction().add({\n      keys: [{pubkey: from, isSigner: true, isDebitable: true}],\n      programId: SystemProgram.programId,\n      data,\n    });\n  }\n}\n","// @flow\n\nimport * as BufferLayout from 'buffer-layout';\n\nimport {Account} from './account';\nimport {PublicKey} from './publickey';\nimport {NUM_TICKS_PER_SECOND} from './timing';\nimport {Transaction, PACKET_DATA_SIZE} from './transaction';\nimport {sendAndConfirmTransaction} from './util/send-and-confirm-transaction';\nimport {sleep} from './util/sleep';\nimport type {Connection} from './connection';\nimport {SystemProgram} from './system-program';\n\n/**\n * Program loader interface\n */\nexport class Loader {\n  /**\n   * Amount of program data placed in each load Transaction\n   */\n  static get chunkSize(): number {\n    // Keep program chunks under PACKET_DATA_SIZE, leaving enough room for the\n    // rest of the Transaction fields\n    //\n    // TODO: replace 300 with a proper constant for the size of the other\n    // Transaction fields\n    return PACKET_DATA_SIZE - 300;\n  }\n\n  /**\n   * Loads a generic program\n   *\n   * @param connection The connection to use\n   * @param payer System account that pays to load the program\n   * @param program Account to load the program into\n   * @param programId Public key that identifies the loader\n   * @param data Program octets\n   */\n  static async load(\n    connection: Connection,\n    payer: Account,\n    program: Account,\n    programId: PublicKey,\n    data: Array<number>,\n  ): Promise<PublicKey> {\n    {\n      const transaction = SystemProgram.createAccount(\n        payer.publicKey,\n        program.publicKey,\n        1,\n        data.length,\n        programId,\n      );\n      await sendAndConfirmTransaction(connection, transaction, payer);\n    }\n\n    const dataLayout = BufferLayout.struct([\n      BufferLayout.u32('instruction'),\n      BufferLayout.u32('offset'),\n      BufferLayout.u32('bytesLength'),\n      BufferLayout.u32('bytesLengthPadding'),\n      BufferLayout.seq(\n        BufferLayout.u8('byte'),\n        BufferLayout.offset(BufferLayout.u32(), -8),\n        'bytes',\n      ),\n    ]);\n\n    const chunkSize = Loader.chunkSize;\n    let offset = 0;\n    let array = data;\n    let transactions = [];\n    while (array.length > 0) {\n      const bytes = array.slice(0, chunkSize);\n      const data = Buffer.alloc(chunkSize + 16);\n      dataLayout.encode(\n        {\n          instruction: 0, // Load instruction\n          offset,\n          bytes,\n        },\n        data,\n      );\n\n      const transaction = new Transaction().add({\n        keys: [{pubkey: program.publicKey, isSigner: true, isDebitable: true}],\n        programId,\n        data,\n      });\n      transactions.push(\n        sendAndConfirmTransaction(connection, transaction, payer, program),\n      );\n\n      // Delay ~1 tick between write transactions in an attempt to reduce AccountInUse errors\n      // since all the write transactions modify the same program account\n      await sleep(1000 / NUM_TICKS_PER_SECOND);\n\n      // Run up to 8 Loads in parallel to prevent too many parallel transactions from\n      // getting rejected with AccountInUse.\n      //\n      // TODO: 8 was selected empirically and should probably be revisited\n      if (transactions.length === 8) {\n        await Promise.all(transactions);\n        transactions = [];\n      }\n\n      offset += chunkSize;\n      array = array.slice(chunkSize);\n    }\n    await Promise.all(transactions);\n\n    // Finalize the account loaded with program data for execution\n    {\n      const dataLayout = BufferLayout.struct([BufferLayout.u32('instruction')]);\n\n      const data = Buffer.alloc(dataLayout.span);\n      dataLayout.encode(\n        {\n          instruction: 1, // Finalize instruction\n        },\n        data,\n      );\n\n      const transaction = new Transaction().add({\n        keys: [{pubkey: program.publicKey, isSigner: true, isDebitable: true}],\n        programId,\n        data,\n      });\n      await sendAndConfirmTransaction(connection, transaction, payer, program);\n    }\n    return program.publicKey;\n  }\n}\n","// @flow\n\nimport {Account} from './account';\nimport {PublicKey} from './publickey';\nimport {Loader} from './loader';\nimport type {Connection} from './connection';\n\n/**\n * Factory class for transactions to interact with a program loader\n */\nexport class BpfLoader {\n  /**\n   * Public key that identifies the BpfLoader\n   */\n  static get programId(): PublicKey {\n    return new PublicKey('BPFLoader1111111111111111111111111111111111');\n  }\n\n  /**\n   * Load a BPF program\n   *\n   * @param connection The connection to use\n   * @param owner User account to load the program into\n   * @param elfBytes The entire ELF containing the BPF program\n   */\n  static load(\n    connection: Connection,\n    payer: Account,\n    elf: Array<number>,\n  ): Promise<PublicKey> {\n    const program = new Account();\n    return Loader.load(connection, payer, program, BpfLoader.programId, elf);\n  }\n}\n","// @flow\n\nimport * as BufferLayout from 'buffer-layout';\n\nimport {Transaction} from './transaction';\nimport {PublicKey} from './publickey';\nimport {SystemProgram} from './system-program';\n\n/**\n * Represents a condition that is met by executing a `applySignature()`\n * transaction\n *\n * @typedef {Object} SignatureCondition\n * @property {string} type Must equal the string 'timestamp'\n * @property {PublicKey} from Public key from which `applySignature()` will be accepted from\n */\nexport type SignatureCondition = {\n  type: 'signature',\n  from: PublicKey,\n};\n\n/**\n * Represents a condition that is met by executing a `applyTimestamp()`\n * transaction\n *\n * @typedef {Object} TimestampCondition\n * @property {string} type Must equal the string 'timestamp'\n * @property {PublicKey} from Public key from which `applyTimestamp()` will be accepted from\n * @property {Date} when The timestamp that was observed\n */\nexport type TimestampCondition = {\n  type: 'timestamp',\n  from: PublicKey,\n  when: Date,\n};\n\n/**\n * Represents a payment to a given public key\n *\n * @typedef {Object} Payment\n * @property {number} amount Number of lamports\n * @property {PublicKey} to Public key of the recipient\n */\nexport type Payment = {\n  amount: number,\n  to: PublicKey,\n};\n\n/**\n * A condition that can unlock a payment\n *\n * @typedef {SignatureCondition|TimestampCondition} BudgetCondition\n */\nexport type BudgetCondition = SignatureCondition | TimestampCondition;\n\n/**\n * @private\n */\nfunction serializePayment(payment: Payment): Buffer {\n  const toData = payment.to.toBuffer();\n  const data = Buffer.alloc(8 + toData.length);\n  data.writeUInt32LE(payment.amount, 0);\n  toData.copy(data, 8);\n  return data;\n}\n\n/**\n * @private\n */\nfunction serializeDate(when: Date): Buffer {\n  const data = Buffer.alloc(8 + 20);\n  data.writeUInt32LE(20, 0); // size of timestamp as u64\n\n  function iso(date) {\n    function pad(number) {\n      if (number < 10) {\n        return '0' + number;\n      }\n      return number;\n    }\n\n    return (\n      date.getUTCFullYear() +\n      '-' +\n      pad(date.getUTCMonth() + 1) +\n      '-' +\n      pad(date.getUTCDate()) +\n      'T' +\n      pad(date.getUTCHours()) +\n      ':' +\n      pad(date.getUTCMinutes()) +\n      ':' +\n      pad(date.getUTCSeconds()) +\n      'Z'\n    );\n  }\n  data.write(iso(when), 8);\n  return data;\n}\n\n/**\n * @private\n */\nfunction serializeCondition(condition: BudgetCondition) {\n  switch (condition.type) {\n    case 'timestamp': {\n      const date = serializeDate(condition.when);\n      const from = condition.from.toBuffer();\n\n      const data = Buffer.alloc(4 + date.length + from.length);\n      data.writeUInt32LE(0, 0); // Condition enum = Timestamp\n      date.copy(data, 4);\n      from.copy(data, 4 + date.length);\n      return data;\n    }\n    case 'signature': {\n      const from = condition.from.toBuffer();\n      const data = Buffer.alloc(4 + from.length);\n      data.writeUInt32LE(1, 0); // Condition enum = Signature\n      from.copy(data, 4);\n      return data;\n    }\n    default:\n      throw new Error(`Unknown condition type: ${condition.type}`);\n  }\n}\n\n/**\n * Factory class for transactions to interact with the Budget program\n */\nexport class BudgetProgram {\n  /**\n   * Public key that identifies the Budget program\n   */\n  static get programId(): PublicKey {\n    return new PublicKey('Budget1111111111111111111111111111111111111');\n  }\n\n  /**\n   * The amount of space this program requires\n   */\n  static get space(): number {\n    return 128;\n  }\n\n  /**\n   * Creates a timestamp condition\n   */\n  static timestampCondition(from: PublicKey, when: Date): TimestampCondition {\n    return {\n      type: 'timestamp',\n      from,\n      when,\n    };\n  }\n\n  /**\n   * Creates a signature condition\n   */\n  static signatureCondition(from: PublicKey): SignatureCondition {\n    return {\n      type: 'signature',\n      from,\n    };\n  }\n\n  /**\n   * Generates a transaction that transfers lamports once any of the conditions are met\n   */\n  static pay(\n    from: PublicKey,\n    program: PublicKey,\n    to: PublicKey,\n    amount: number,\n    ...conditions: Array<BudgetCondition>\n  ): Transaction {\n    const data = Buffer.alloc(1024);\n    let pos = 0;\n    data.writeUInt32LE(0, pos); // NewBudget instruction\n    pos += 4;\n\n    switch (conditions.length) {\n      case 0: {\n        data.writeUInt32LE(0, pos); // BudgetExpr enum = Pay\n        pos += 4;\n\n        {\n          const payment = serializePayment({amount, to});\n          payment.copy(data, pos);\n          pos += payment.length;\n        }\n        const trimmedData = data.slice(0, pos);\n\n        const transaction = SystemProgram.createAccount(\n          from,\n          program,\n          amount,\n          trimmedData.length,\n          this.programId,\n        );\n\n        return transaction.add({\n          keys: [\n            {pubkey: to, isSigner: false, isDebitable: false},\n            {pubkey: program, isSigner: false, isDebitable: true},\n          ],\n          programId: this.programId,\n          data: trimmedData,\n        });\n      }\n      case 1: {\n        data.writeUInt32LE(1, pos); // BudgetExpr enum = After\n        pos += 4;\n        {\n          const condition = conditions[0];\n\n          const conditionData = serializeCondition(condition);\n          conditionData.copy(data, pos);\n          pos += conditionData.length;\n\n          data.writeUInt32LE(0, pos); // BudgetExpr enum = Pay\n          pos += 4;\n\n          const paymentData = serializePayment({amount, to});\n          paymentData.copy(data, pos);\n          pos += paymentData.length;\n        }\n        const trimmedData = data.slice(0, pos);\n\n        const transaction = SystemProgram.createAccount(\n          from,\n          program,\n          amount,\n          trimmedData.length,\n          this.programId,\n        );\n\n        return transaction.add({\n          keys: [{pubkey: program, isSigner: false, isDebitable: true}],\n          programId: this.programId,\n          data: trimmedData,\n        });\n      }\n\n      case 2: {\n        data.writeUInt32LE(2, pos); // BudgetExpr enum = Or\n        pos += 4;\n\n        for (let condition of conditions) {\n          const conditionData = serializeCondition(condition);\n          conditionData.copy(data, pos);\n          pos += conditionData.length;\n\n          data.writeUInt32LE(0, pos); // BudgetExpr enum = Pay\n          pos += 4;\n\n          const paymentData = serializePayment({amount, to});\n          paymentData.copy(data, pos);\n          pos += paymentData.length;\n        }\n        const trimmedData = data.slice(0, pos);\n\n        const transaction = SystemProgram.createAccount(\n          from,\n          program,\n          amount,\n          trimmedData.length,\n          this.programId,\n        );\n\n        return transaction.add({\n          keys: [{pubkey: program, isSigner: false, isDebitable: true}],\n          programId: this.programId,\n          data: trimmedData,\n        });\n      }\n\n      default:\n        throw new Error(\n          `A maximum of two conditions are support: ${\n            conditions.length\n          } provided`,\n        );\n    }\n  }\n\n  /**\n   * Generates a transaction that transfers lamports once both conditions are met\n   */\n  static payOnBoth(\n    from: PublicKey,\n    program: PublicKey,\n    to: PublicKey,\n    amount: number,\n    condition1: BudgetCondition,\n    condition2: BudgetCondition,\n  ): Transaction {\n    const data = Buffer.alloc(1024);\n    let pos = 0;\n    data.writeUInt32LE(0, pos); // NewBudget instruction\n    pos += 4;\n\n    data.writeUInt32LE(3, pos); // BudgetExpr enum = And\n    pos += 4;\n\n    for (let condition of [condition1, condition2]) {\n      const conditionData = serializeCondition(condition);\n      conditionData.copy(data, pos);\n      pos += conditionData.length;\n    }\n\n    data.writeUInt32LE(0, pos); // BudgetExpr enum = Pay\n    pos += 4;\n\n    const paymentData = serializePayment({amount, to});\n    paymentData.copy(data, pos);\n    pos += paymentData.length;\n\n    const trimmedData = data.slice(0, pos);\n\n    const transaction = SystemProgram.createAccount(\n      from,\n      program,\n      amount,\n      trimmedData.length,\n      this.programId,\n    );\n\n    return transaction.add({\n      keys: [{pubkey: program, isSigner: false, isDebitable: true}],\n      programId: this.programId,\n      data: trimmedData,\n    });\n  }\n\n  /**\n   * Generates a transaction that applies a timestamp, which could enable a\n   * pending payment to proceed.\n   */\n  static applyTimestamp(\n    from: PublicKey,\n    program: PublicKey,\n    to: PublicKey,\n    when: Date,\n  ): Transaction {\n    const whenData = serializeDate(when);\n    const data = Buffer.alloc(4 + whenData.length);\n\n    data.writeUInt32LE(1, 0); // ApplyTimestamp instruction\n    whenData.copy(data, 4);\n\n    return new Transaction().add({\n      keys: [\n        {pubkey: from, isSigner: true, isDebitable: true},\n        {pubkey: program, isSigner: false, isDebitable: true},\n        {pubkey: to, isSigner: false, isDebitable: false},\n      ],\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generates a transaction that applies a signature, which could enable a\n   * pending payment to proceed.\n   */\n  static applySignature(\n    from: PublicKey,\n    program: PublicKey,\n    to: PublicKey,\n  ): Transaction {\n    const dataLayout = BufferLayout.struct([BufferLayout.u32('instruction')]);\n\n    const data = Buffer.alloc(dataLayout.span);\n    dataLayout.encode(\n      {\n        instruction: 2, // ApplySignature instruction\n      },\n      data,\n    );\n\n    return new Transaction().add({\n      keys: [\n        {pubkey: from, isSigner: true, isDebitable: true},\n        {pubkey: program, isSigner: false, isDebitable: true},\n        {pubkey: to, isSigner: false, isDebitable: false},\n      ],\n      programId: this.programId,\n      data,\n    });\n  }\n}\n","// @flow\n\nimport {Account} from './account';\nimport {PublicKey} from './publickey';\nimport {Loader} from './loader';\nimport type {Connection} from './connection';\n\n/**\n * Factory class for transactions to interact with a program loader\n */\nexport class NativeLoader {\n  /**\n   * Public key that identifies the NativeLoader\n   */\n  static get programId(): PublicKey {\n    return new PublicKey('NativeLoader1111111111111111111111111111111');\n  }\n\n  /**\n   * Loads a native program\n   *\n   * @param connection The connection to use\n   * @param payer System account that pays to load the program\n   * @param programName Name of the native program\n   */\n  static load(\n    connection: Connection,\n    payer: Account,\n    programName: string,\n  ): Promise<PublicKey> {\n    const bytes = [...Buffer.from(programName)];\n    const program = new Account();\n    return Loader.load(\n      connection,\n      payer,\n      program,\n      NativeLoader.programId,\n      bytes,\n    );\n  }\n}\n","/**\n * @flow\n */\n\nimport assert from 'assert';\nimport BN from 'bn.js';\nimport * as BufferLayout from 'buffer-layout';\n\nimport * as Layout from './layout';\nimport {Account} from './account';\nimport {PublicKey} from './publickey';\nimport {SystemProgram} from './system-program';\nimport {Transaction, TransactionInstruction} from './transaction';\nimport type {TransactionSignature} from './transaction';\nimport {sendAndConfirmTransaction} from './util/send-and-confirm-transaction';\nimport type {Connection} from './connection';\n\n/**\n * Some amount of tokens\n */\nexport class TokenAmount extends BN {\n  /**\n   * Convert to Buffer representation\n   */\n  toBuffer(): Buffer {\n    const a = super.toArray().reverse();\n    const b = Buffer.from(a);\n    if (b.length === 8) {\n      return b;\n    }\n    assert(b.length < 8, 'TokenAmount too large');\n\n    const zeroPad = Buffer.alloc(8);\n    b.copy(zeroPad);\n    return zeroPad;\n  }\n\n  /**\n   * Construct a TokenAmount from Buffer representation\n   */\n  static fromBuffer(buffer: Buffer): TokenAmount {\n    assert(buffer.length === 8, `Invalid buffer length: ${buffer.length}`);\n    return new BN(\n      [...buffer]\n        .reverse()\n        .map(i => `00${i.toString(16)}`.slice(-2))\n        .join(''),\n      16,\n    );\n  }\n}\n\n/**\n * Information about a token\n */\ntype TokenInfo = {|\n  /**\n   * Total supply of tokens\n   */\n  supply: TokenAmount,\n\n  /**\n   * Number of base 10 digits to the right of the decimal place\n   */\n  decimals: number,\n\n  /**\n   * Descriptive name of this token\n   */\n  name: string,\n\n  /**\n   * Symbol for this token\n   */\n  symbol: string,\n|};\n\n/**\n * @private\n */\nconst TokenInfoLayout = BufferLayout.struct([\n  Layout.uint64('supply'),\n  BufferLayout.u8('decimals'),\n  Layout.rustString('name'),\n  Layout.rustString('symbol'),\n]);\n\n/**\n * Information about a token account\n */\ntype TokenAccountInfo = {|\n  /**\n   * The kind of token this account holds\n   */\n  token: PublicKey,\n\n  /**\n   * Owner of this account\n   */\n  owner: PublicKey,\n\n  /**\n   * Amount of tokens this account holds\n   */\n  amount: TokenAmount,\n\n  /**\n   * The source account for the tokens.\n   *\n   * If `source` is null, the source is this account.\n   * If `source` is not null, the `amount` of tokens in this account represent\n   * an allowance of tokens that may be transferred from the source account\n   */\n  source: null | PublicKey,\n\n  /**\n   * Original amount of tokens this delegate account was authorized to spend\n   * If `source` is null, originalAmount is zero\n   */\n  originalAmount: TokenAmount,\n|};\n\n/**\n * @private\n */\nconst TokenAccountInfoLayout = BufferLayout.struct([\n  Layout.publicKey('token'),\n  Layout.publicKey('owner'),\n  Layout.uint64('amount'),\n  BufferLayout.u8('sourceOption'),\n  Layout.publicKey('source'),\n  Layout.uint64('originalAmount'),\n]);\n\ntype TokenAndPublicKey = [Token, PublicKey]; // This type exists to workaround an esdoc parse error\n\n/**\n * The built-in token program\n */\nexport const SYSTEM_TOKEN_PROGRAM_ID = new PublicKey(\n  'Token11111111111111111111111111111111111111',\n);\n\n/**\n * An ERC20-like Token\n */\nexport class Token {\n  /**\n   * @private\n   */\n  connection: Connection;\n\n  /**\n   * The public key identifying this token\n   */\n  token: PublicKey;\n\n  /**\n   * Program Identifier for the Token program\n   */\n  programId: PublicKey;\n\n  /**\n   * Create a Token object attached to the specific token\n   *\n   * @param connection The connection to use\n   * @param token Public key of the token\n   * @param programId Optional token programId, uses the system programId by default\n   */\n  constructor(\n    connection: Connection,\n    token: PublicKey,\n    programId: PublicKey = SYSTEM_TOKEN_PROGRAM_ID,\n  ) {\n    Object.assign(this, {connection, token, programId});\n  }\n\n  /**\n   * Create a new Token\n   *\n   * @param connection The connection to use\n   * @param owner User account that will own the returned Token Account\n   * @param supply Total supply of the new token\n   * @param name Descriptive name of this token\n   * @param symbol Symbol for this token\n   * @param decimals Location of the decimal place\n   * @param programId Optional token programId, uses the system programId by default\n   * @return Token object for the newly minted token, Public key of the Token Account holding the total supply of new tokens\n   */\n  static async createNewToken(\n    connection: Connection,\n    owner: Account,\n    supply: TokenAmount,\n    name: string,\n    symbol: string,\n    decimals: number,\n    programId: PublicKey = SYSTEM_TOKEN_PROGRAM_ID,\n  ): Promise<TokenAndPublicKey> {\n    const tokenAccount = new Account();\n    const token = new Token(connection, tokenAccount.publicKey, programId);\n    const initialAccountPublicKey = await token.newAccount(owner, null);\n\n    let transaction;\n\n    const dataLayout = BufferLayout.struct([\n      BufferLayout.u32('instruction'),\n      Layout.uint64('supply'),\n      BufferLayout.u8('decimals'),\n      Layout.rustString('name'),\n      Layout.rustString('symbol'),\n    ]);\n\n    let data = Buffer.alloc(1024);\n    {\n      const encodeLength = dataLayout.encode(\n        {\n          instruction: 0, // NewToken instruction\n          supply: supply.toBuffer(),\n          decimals,\n          name,\n          symbol,\n        },\n        data,\n      );\n      data = data.slice(0, encodeLength);\n    }\n\n    // Allocate memory for the tokenAccount account\n    transaction = SystemProgram.createAccount(\n      owner.publicKey,\n      tokenAccount.publicKey,\n      1,\n      1 + data.length,\n      programId,\n    );\n    await sendAndConfirmTransaction(connection, transaction, owner);\n\n    transaction = new Transaction().add({\n      keys: [\n        {pubkey: tokenAccount.publicKey, isSigner: true, isDebitable: false},\n        {pubkey: initialAccountPublicKey, isSigner: false, isDebitable: true},\n      ],\n      programId,\n      data,\n    });\n    await sendAndConfirmTransaction(\n      connection,\n      transaction,\n      owner,\n      tokenAccount,\n    );\n\n    return [token, initialAccountPublicKey];\n  }\n\n  /**\n   * Create a new and empty token account.\n   *\n   * This account may then be used as a `transfer()` or `approve()` destination\n   *\n   * @param owner User account that will own the new token account\n   * @param source If not null, create a delegate account that when authorized\n   *               may transfer tokens from this `source` account\n   * @return Public key of the new empty token account\n   */\n  async newAccount(\n    owner: Account,\n    source: null | PublicKey = null,\n  ): Promise<PublicKey> {\n    const tokenAccount = new Account();\n    let transaction;\n\n    const dataLayout = BufferLayout.struct([BufferLayout.u32('instruction')]);\n\n    const data = Buffer.alloc(dataLayout.span);\n    dataLayout.encode(\n      {\n        instruction: 1, // NewTokenAccount instruction\n      },\n      data,\n    );\n\n    // Allocate memory for the token\n    transaction = SystemProgram.createAccount(\n      owner.publicKey,\n      tokenAccount.publicKey,\n      1,\n      1 + TokenAccountInfoLayout.span,\n      this.programId,\n    );\n    await sendAndConfirmTransaction(this.connection, transaction, owner);\n\n    // Initialize the token account\n    const keys = [\n      {pubkey: tokenAccount.publicKey, isSigner: true, isDebitable: true},\n      {pubkey: owner.publicKey, isSigner: false, isDebitable: false},\n      {pubkey: this.token, isSigner: false, isDebitable: false},\n    ];\n    if (source) {\n      keys.push({pubkey: source, isSigner: false, isDebitable: false});\n    }\n    transaction = new Transaction().add({\n      keys,\n      programId: this.programId,\n      data,\n    });\n    await sendAndConfirmTransaction(\n      this.connection,\n      transaction,\n      owner,\n      tokenAccount,\n    );\n\n    return tokenAccount.publicKey;\n  }\n\n  /**\n   * Retrieve token information\n   */\n  async tokenInfo(): Promise<TokenInfo> {\n    const accountInfo = await this.connection.getAccountInfo(this.token);\n    if (!accountInfo.owner.equals(this.programId)) {\n      throw new Error(\n        `Invalid token owner: ${JSON.stringify(accountInfo.owner)}`,\n      );\n    }\n\n    const data = Buffer.from(accountInfo.data);\n\n    if (data.readUInt8(0) !== 1) {\n      throw new Error(`Invalid token data`);\n    }\n    const tokenInfo = TokenInfoLayout.decode(data, 1);\n    tokenInfo.supply = TokenAmount.fromBuffer(tokenInfo.supply);\n    return tokenInfo;\n  }\n\n  /**\n   * Retrieve account information\n   *\n   * @param account Public key of the token account\n   */\n  async accountInfo(account: PublicKey): Promise<TokenAccountInfo> {\n    const accountInfo = await this.connection.getAccountInfo(account);\n    if (!accountInfo.owner.equals(this.programId)) {\n      throw new Error(`Invalid token account owner`);\n    }\n\n    const data = Buffer.from(accountInfo.data);\n    if (data.readUInt8(0) !== 2) {\n      throw new Error(`Invalid token account data`);\n    }\n    const tokenAccountInfo = TokenAccountInfoLayout.decode(data, 1);\n\n    tokenAccountInfo.token = new PublicKey(tokenAccountInfo.token);\n    tokenAccountInfo.owner = new PublicKey(tokenAccountInfo.owner);\n    tokenAccountInfo.amount = TokenAmount.fromBuffer(tokenAccountInfo.amount);\n    if (tokenAccountInfo.sourceOption === 0) {\n      tokenAccountInfo.source = null;\n      tokenAccountInfo.originalAmount = new TokenAmount();\n    } else {\n      tokenAccountInfo.source = new PublicKey(tokenAccountInfo.source);\n      tokenAccountInfo.originalAmount = TokenAmount.fromBuffer(\n        tokenAccountInfo.originalAmount,\n      );\n    }\n\n    if (!tokenAccountInfo.token.equals(this.token)) {\n      throw new Error(\n        `Invalid token account token: ${JSON.stringify(\n          tokenAccountInfo.token,\n        )} !== ${JSON.stringify(this.token)}`,\n      );\n    }\n    return tokenAccountInfo;\n  }\n\n  /**\n   * Transfer tokens to another account\n   *\n   * @param owner Owner of the source token account\n   * @param source Source token account\n   * @param destination Destination token account\n   * @param amount Number of tokens to transfer\n   */\n  async transfer(\n    owner: Account,\n    source: PublicKey,\n    destination: PublicKey,\n    amount: number | TokenAmount,\n  ): Promise<?TransactionSignature> {\n    return await sendAndConfirmTransaction(\n      this.connection,\n      new Transaction().add(\n        await this.transferInstruction(\n          owner.publicKey,\n          source,\n          destination,\n          amount,\n        ),\n      ),\n      owner,\n    );\n  }\n\n  /**\n   * Grant a third-party permission to transfer up the specified number of tokens from an account\n   *\n   * @param owner Owner of the source token account\n   * @param account Public key of the token account\n   * @param delegate Token account authorized to perform a transfer tokens from the source account\n   * @param amount Maximum number of tokens the delegate may transfer\n   */\n  async approve(\n    owner: Account,\n    account: PublicKey,\n    delegate: PublicKey,\n    amount: number | TokenAmount,\n  ): Promise<void> {\n    await sendAndConfirmTransaction(\n      this.connection,\n      new Transaction().add(\n        this.approveInstruction(owner.publicKey, account, delegate, amount),\n      ),\n      owner,\n    );\n  }\n\n  /**\n   * Remove approval for the transfer of any remaining tokens\n   *\n   * @param owner Owner of the source token account\n   * @param account Public key of the token account\n   * @param delegate Token account to revoke authorization from\n   */\n  revoke(\n    owner: Account,\n    account: PublicKey,\n    delegate: PublicKey,\n  ): Promise<void> {\n    return this.approve(owner, account, delegate, 0);\n  }\n\n  /**\n   * Assign a new owner to the account\n   *\n   * @param owner Owner of the token account\n   * @param account Public key of the token account\n   * @param newOwner New owner of the token account\n   */\n  async setOwner(\n    owner: Account,\n    account: PublicKey,\n    newOwner: PublicKey,\n  ): Promise<void> {\n    await sendAndConfirmTransaction(\n      this.connection,\n      new Transaction().add(\n        this.setOwnerInstruction(owner.publicKey, account, newOwner),\n      ),\n      owner,\n    );\n  }\n\n  /**\n   * Construct a Transfer instruction\n   *\n   * @param owner Owner of the source token account\n   * @param source Source token account\n   * @param destination Destination token account\n   * @param amount Number of tokens to transfer\n   */\n  async transferInstruction(\n    owner: PublicKey,\n    source: PublicKey,\n    destination: PublicKey,\n    amount: number | TokenAmount,\n  ): Promise<TransactionInstruction> {\n    const accountInfo = await this.accountInfo(source);\n    if (!owner.equals(accountInfo.owner)) {\n      throw new Error('Account owner mismatch');\n    }\n\n    const dataLayout = BufferLayout.struct([\n      BufferLayout.u32('instruction'),\n      Layout.uint64('amount'),\n    ]);\n\n    const data = Buffer.alloc(dataLayout.span);\n    dataLayout.encode(\n      {\n        instruction: 2, // Transfer instruction\n        amount: new TokenAmount(amount).toBuffer(),\n      },\n      data,\n    );\n\n    const keys = [\n      {pubkey: owner, isSigner: true, isDebitable: false},\n      {pubkey: source, isSigner: false, isDebitable: true},\n      {pubkey: destination, isSigner: false, isDebitable: true},\n    ];\n    if (accountInfo.source) {\n      keys.push({\n        pubkey: accountInfo.source,\n        isSigner: false,\n        isDebitable: true,\n      });\n    }\n    return new TransactionInstruction({\n      keys,\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Construct an Approve instruction\n   *\n   * @param owner Owner of the source token account\n   * @param account Public key of the token account\n   * @param delegate Token account authorized to perform a transfer tokens from the source account\n   * @param amount Maximum number of tokens the delegate may transfer\n   */\n  approveInstruction(\n    owner: PublicKey,\n    account: PublicKey,\n    delegate: PublicKey,\n    amount: number | TokenAmount,\n  ): TransactionInstruction {\n    const dataLayout = BufferLayout.struct([\n      BufferLayout.u32('instruction'),\n      Layout.uint64('amount'),\n    ]);\n\n    const data = Buffer.alloc(dataLayout.span);\n    dataLayout.encode(\n      {\n        instruction: 3, // Approve instruction\n        amount: new TokenAmount(amount).toBuffer(),\n      },\n      data,\n    );\n\n    return new TransactionInstruction({\n      keys: [\n        {pubkey: owner, isSigner: true, isDebitable: false},\n        {pubkey: account, isSigner: false, isDebitable: true},\n        {pubkey: delegate, isSigner: false, isDebitable: true},\n      ],\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Construct an Revoke instruction\n   *\n   * @param owner Owner of the source token account\n   * @param account Public key of the token account\n   * @param delegate Token account authorized to perform a transfer tokens from the source account\n   */\n  revokeInstruction(\n    owner: PublicKey,\n    account: PublicKey,\n    delegate: PublicKey,\n  ): TransactionInstruction {\n    return this.approveInstruction(owner, account, delegate, 0);\n  }\n\n  /**\n   * Construct a SetOwner instruction\n   *\n   * @param owner Owner of the token account\n   * @param account Public key of the token account\n   * @param newOwner New owner of the token account\n   */\n  setOwnerInstruction(\n    owner: PublicKey,\n    account: PublicKey,\n    newOwner: PublicKey,\n  ): TransactionInstruction {\n    const dataLayout = BufferLayout.struct([BufferLayout.u32('instruction')]);\n\n    const data = Buffer.alloc(dataLayout.span);\n    dataLayout.encode(\n      {\n        instruction: 4, // SetOwner instruction\n      },\n      data,\n    );\n\n    return new TransactionInstruction({\n      keys: [\n        {pubkey: owner, isSigner: true, isDebitable: false},\n        {pubkey: account, isSigner: false, isDebitable: true},\n        {pubkey: newOwner, isSigner: false, isDebitable: true},\n      ],\n      programId: this.programId,\n      data,\n    });\n  }\n}\n","// @flow\n\nimport {Connection} from '../connection';\nimport {sleep} from './sleep';\nimport type {TransactionSignature} from '../transaction';\nimport {DEFAULT_TICKS_PER_SLOT, NUM_TICKS_PER_SECOND} from '../timing';\n\n/**\n * Sign, send and confirm a raw transaction\n */\nexport async function sendAndConfirmRawTransaction(\n  connection: Connection,\n  rawTransaction: Buffer,\n): Promise<TransactionSignature> {\n  const start = Date.now();\n  let signature = await connection.sendRawTransaction(rawTransaction);\n\n  // Wait up to a couple slots for a confirmation\n  let status = null;\n  let statusRetries = 6;\n  for (;;) {\n    status = await connection.getSignatureStatus(signature);\n    if (status) {\n      break;\n    }\n\n    // Sleep for approximately half a slot\n    await sleep((500 * DEFAULT_TICKS_PER_SLOT) / NUM_TICKS_PER_SECOND);\n\n    if (--statusRetries <= 0) {\n      const duration = (Date.now() - start) / 1000;\n      throw new Error(\n        `Raw Transaction '${signature}' was not confirmed in ${duration.toFixed(\n          2,\n        )} seconds (${JSON.stringify(status)})`,\n      );\n    }\n  }\n\n  if (status && 'Ok' in status) {\n    return signature;\n  }\n\n  throw new Error(\n    `Raw transaction ${signature} failed (${JSON.stringify(status)})`,\n  );\n}\n","//@flow\n\nimport {testnetDefaultChannel} from '../../package.json';\n\n/**\n * @private\n */\nconst endpoint = {\n  edge: 'https://api.edge.testnet.solana.com',\n  beta: 'https://api.beta.testnet.solana.com',\n  stable: 'https://api.testnet.solana.com',\n};\n\n/**\n * Retrieves the RPC endpoint URL for the specified testnet release\n * channel\n */\nexport function testnetChannelEndpoint(channel?: string): string {\n  if (!channel) {\n    return endpoint[testnetDefaultChannel];\n  }\n\n  if (endpoint[channel]) {\n    return endpoint[channel];\n  }\n  throw new Error(`Unknown channel: ${channel}`);\n}\n"],"names":["PublicKey","value","startsWith","_bn","BN","substring","bs58","decode","byteLength","Error","publicKey","eq","encode","toBuffer","b","toArrayLike","Buffer","length","zeroPad","alloc","copy","toBase58","o","window","Account","secretKey","_keypair","nacl","sign","keyPair","fromSecretKey","NUM_TICKS_PER_SECOND","DEFAULT_TICKS_PER_SLOT","property","BufferLayout","uint64","rustString","rsl","_decode","bind","_encode","buffer","offset","data","chars","toString","str","from","decodeLength","bytes","len","size","elem","shift","encodeLength","rem_len","push","PACKET_DATA_SIZE","TransactionInstruction","opts","Object","assign","Transaction","signatures","signature","items","forEach","item","instructions","concat","recentBlockhash","keys","map","numRequiredSignatures","numCreditOnlySignedAccounts","numCreditOnlyUnsignedAccounts","programIds","instruction","keySignerPair","keyStr","pubkey","includes","isSigner","isDebitable","programId","keyCount","shortvec","keyIndicesCount","dataCount","programIdIndex","indexOf","keyIndices","keyObj","dataLength","invariant","keyIndex","instructionCount","instructionBuffer","instructionBufferLength","instructionLayout","slice","signDataLayout","Layout","transaction","key","signData","signPartial","partialSigners","accountOrPublicKey","_getSignData","index","detached","signer","findIndex","sigpair","equals","signatureCount","transactionLength","wireTransaction","PUBKEY_LENGTH","SIGNATURE_LENGTH","isCreditDebit","i","numKeys","byteArray","accountCount","accounts","account","programIndex","accountIndexCount","accountIndex","sigPubkeyPair","instructionData","j","some","sleep","ms","Promise","resolve","setTimeout","createRpcRequest","url","server","jayson","request","callback","options","method","body","headers","fetch","res","text","args","reject","err","response","GetBalanceRpcResult","struct","jsonrpc","literal","id","error","result","jsonRpcResult","resultDescription","jsonRpcVersion","union","AccountInfoResult","executable","owner","lamports","GetAccountInfoRpcResult","AccountNotificationResult","subscription","ProgramAccountInfoResult","ProgramAccountNotificationResult","ConfirmTransactionRpcResult","GetSlotLeader","GetClusterNodes","list","gossip","tpu","rpc","GetClusterNodes_015","GetEpochVoteAccounts","votePubkey","nodePubkey","stake","commission","GetSignatureStatusRpcResult","Ok","Err","GetTransactionCountRpcResult","GetRecentBlockhash","lamportsPerSignature","maxLamportsPerSignature","minLamportsPerSignature","targetLamportsPerSignature","targetSignaturesPerSlot","GetRecentBlockhash_015","RequestAirdropRpcResult","SendTransactionRpcResult","Connection","endpoint","urlParse","_rpcRequest","href","_blockhashInfo","seconds","transactionSignatures","protocol","host","port","String","Number","_rpcWebSocket","RpcWebSocketClient","urlFormat","autoconnect","max_reconnects","Infinity","on","_wsOnOpen","_wsOnError","_wsOnClose","_wsOnAccountNotification","_wsOnProgramAccountNotification","unsafeRes","message","assert","res_015","console","log","node","undefined","blockhash","feeCalculator","to","amount","signers","Date","getSeconds","_disableBlockhashCaching","attempts","startTime","now","getRecentBlockhash","serialize","sendRawTransaction","rawTransaction","_rpcWebSocketConnected","_updateSubscriptions","code","accountKeys","_accountChangeSubscriptions","programKeys","_programAccountChangeSubscriptions","close","subscriptionId","connect","call","notification","sub","_accountChangeSubscriptionCounter","accountId","accountInfo","_programAccountChangeSubscriptionCounter","sendAndConfirmTransaction","connection","sendRetries","start","sendTransaction","status","statusRetries","getSignatureStatus","duration","toFixed","JSON","stringify","Math","random","SystemProgram","newAccount","space","dataLayout","span","add","Loader","payer","program","createAccount","chunkSize","array","transactions","all","BpfLoader","elf","load","serializePayment","payment","toData","writeUInt32LE","serializeDate","when","iso","date","pad","number","getUTCFullYear","getUTCMonth","getUTCDate","getUTCHours","getUTCMinutes","getUTCSeconds","write","serializeCondition","condition","type","BudgetProgram","pos","conditions","trimmedData","conditionData","paymentData","condition1","condition2","whenData","NativeLoader","programName","TokenAmount","a","reverse","join","TokenInfoLayout","TokenAccountInfoLayout","SYSTEM_TOKEN_PROGRAM_ID","Token","token","source","tokenAccount","getAccountInfo","readUInt8","tokenInfo","supply","fromBuffer","tokenAccountInfo","sourceOption","originalAmount","destination","transferInstruction","delegate","approveInstruction","approve","newOwner","setOwnerInstruction","name","symbol","decimals","initialAccountPublicKey","sendAndConfirmRawTransaction","edge","beta","stable","testnetChannelEndpoint","channel","testnetDefaultChannel"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;AAKA;;;;AAGA,IAAaA,SAAb;;AAAA;;;;qBAMcC,KAAZ,EAA6D;;;;;QACvD,OAAOA,KAAP,KAAiB,QAArB,EAA+B;;UAEzBA,KAAK,CAACC,UAAN,CAAiB,IAAjB,CAAJ,EAA4B;aACrBC,GAAL,GAAW,IAAIC,EAAJ,CAAOH,KAAK,CAACI,SAAN,CAAgB,CAAhB,CAAP,EAA2B,EAA3B,CAAX;OADF,MAEO;;aAEAF,GAAL,GAAW,IAAIC,EAAJ,CAAOE,IAAI,CAACC,MAAL,CAAYN,KAAZ,CAAP,CAAX;;KANJ,MAQO;WACAE,GAAL,GAAW,IAAIC,EAAJ,CAAOH,KAAP,CAAX;;;QAGE,KAAKE,GAAL,CAASK,UAAT,KAAwB,EAA5B,EAAgC;YACxB,IAAIC,KAAJ,4BAAN;;;;;;;;;;;;;;2BAcGC,SAlCT,EAkCwC;aAC7B,KAAKP,GAAL,CAASQ,EAAT,CAAYD,SAAS,CAACP,GAAtB,CAAP;;;;;;;;+BAMiB;aACVG,IAAI,CAACM,MAAL,CAAY,KAAKC,QAAL,EAAZ,CAAP;;;;;;;;+BAMiB;UACXC,CAAC,GAAG,KAAKX,GAAL,CAASY,WAAT,CAAqBC,MAArB,CAAV;;UACIF,CAAC,CAACG,MAAF,KAAa,EAAjB,EAAqB;eACZH,CAAP;;;UAGII,OAAO,GAAGF,MAAM,CAACG,KAAP,CAAa,EAAb,CAAhB;MACAL,CAAC,CAACM,IAAF,CAAOF,OAAP,EAAgB,KAAKJ,CAAC,CAACG,MAAvB;aACOC,OAAP;;;;;;;;+BAMiB;aACV,KAAKG,QAAL,EAAP;;;;gCApCiBC,CA3BrB,EA2ByC;aAC9BA,CAAC,YAAYtB,SAApB;;;;;;AAsCJuB,MAAM,CAACvB,SAAP,GAAmBA,SAAnB;;ACpEA;;;;AAGA,IAAawB,OAAb;;AAAA;;;;;;;;;qBAWyC;QAA3BC,SAA2B,uEAAN,IAAM;;;;;;QACjCA,SAAJ,EAAe;WACRC,QAAL,GAAgBC,IAAI,CAACC,IAAL,CAAUC,OAAV,CAAkBC,aAAlB,CAAgCL,SAAhC,CAAhB;KADF,MAEO;WACAC,QAAL,GAAgBC,IAAI,CAACC,IAAL,CAAUC,OAAV,EAAhB;;;;;;;;;;wBAOuB;aAClB,IAAI7B,SAAJ,CAAc,KAAK0B,QAAL,CAAchB,SAA5B,CAAP;;;;;;;;wBAMsB;aACf,KAAKgB,QAAL,CAAcD,SAArB;;;;;;;ACrCJ;;;;;;AAMA,AAAO,IAAMM,oBAAoB,GAAG,EAA7B;;;;;AAKP,AAAO,IAAMC,sBAAsB,GAAG,CAA/B;;ACTP;;;;AAGA,AAAO,IAAMtB,SAAS,GAAG,SAAZA,SAAY,GAA4C;MAA3CuB,QAA2C,uEAAxB,WAAwB;SAC5DC,iBAAA,CAAkB,EAAlB,EAAsBD,QAAtB,CAAP;CADK;;;;;AAOP,AAAO,IAAME,MAAM,GAAG,SAATA,MAAS,GAAyC;MAAxCF,QAAwC,uEAArB,QAAqB;SACtDC,iBAAA,CAAkB,CAAlB,EAAqBD,QAArB,CAAP;CADK;;;;;AAOP,AAAO,IAAMG,UAAU,GAAG,SAAbA,UAAa,GAAiC;MAAhCH,QAAgC,uEAAb,QAAa;MACnDI,GAAG,GAAGH,mBAAA,CACV,CACEA,gBAAA,CAAiB,QAAjB,CADF,EAEEA,gBAAA,CAAiB,eAAjB,CAFF,EAGEA,iBAAA,CAAkBA,mBAAA,CAAoBA,gBAAA,EAApB,EAAwC,CAAC,CAAzC,CAAlB,EAA+D,OAA/D,CAHF,CADU,EAMVD,QANU,CAAZ;;MAQMK,OAAO,GAAGD,GAAG,CAAC9B,MAAJ,CAAWgC,IAAX,CAAgBF,GAAhB,CAAhB;;MACMG,OAAO,GAAGH,GAAG,CAACzB,MAAJ,CAAW2B,IAAX,CAAgBF,GAAhB,CAAhB;;EAEAA,GAAG,CAAC9B,MAAJ,GAAa,UAACkC,MAAD,EAASC,MAAT,EAAoB;QACzBC,IAAI,GAAGL,OAAO,CAACG,MAAD,EAASC,MAAT,CAApB;;WACOC,IAAI,CAACC,KAAL,CAAWC,QAAX,CAAoB,MAApB,CAAP;GAFF;;EAKAR,GAAG,CAACzB,MAAJ,GAAa,UAACkC,GAAD,EAAML,MAAN,EAAcC,MAAd,EAAyB;QAC9BC,IAAI,GAAG;MACXC,KAAK,EAAE5B,MAAM,CAAC+B,IAAP,CAAYD,GAAZ,EAAiB,MAAjB;KADT;WAGON,OAAO,CAACG,IAAD,EAAOF,MAAP,EAAeC,MAAf,CAAd;GAJF;;SAOOL,GAAP;CAxBK;;ACnBA,SAASW,YAAT,CAAsBC,KAAtB,EAAoD;MACrDC,GAAG,GAAG,CAAV;MACIC,IAAI,GAAG,CAAX;;WACS;QACHC,IAAI,GAAGH,KAAK,CAACI,KAAN,EAAX;IACAH,GAAG,IAAI,CAACE,IAAI,GAAG,IAAR,KAAkBD,IAAI,GAAG,CAAhC;IACAA,IAAI,IAAI,CAAR;;QACI,CAACC,IAAI,GAAG,IAAR,MAAkB,CAAtB,EAAyB;;;;;SAIpBF,GAAP;;AAGF,AAAO,SAASI,YAAT,CAAsBL,KAAtB,EAA4CC,GAA5C,EAAyD;MAC1DK,OAAO,GAAGL,GAAd;;WACS;QACHE,IAAI,GAAGG,OAAO,GAAG,IAArB;IACAA,OAAO,KAAK,CAAZ;;QACIA,OAAO,IAAI,CAAf,EAAkB;MAChBN,KAAK,CAACO,IAAN,CAAWJ,IAAX;;KADF,MAGO;MACLA,IAAI,IAAI,IAAR;MACAH,KAAK,CAACO,IAAN,CAAWJ,IAAX;;;;;ACRN;;;;;;;AAOA,AAAO,IAAMK,gBAAgB,GAAG,OAAO,EAAP,GAAY,CAArC;;;;;;;;;;;;;AAmBP,IAAaC,sBAAb;;;;;;;;;;;;;AAqBE,gCAAYC,IAAZ,EAAqD;;;gCAZhD,EAYgD;;;;gCAFtC3C,MAAM,CAACG,KAAP,CAAa,CAAb,CAEsC;;EACnDwC,IAAI,IAAIC,MAAM,CAACC,MAAP,CAAc,IAAd,EAAoBF,IAApB,CAAR;CAtBJ;;;;;;;;AAkDA,IAAaG,WAAb;;AAAA;;;;;;;;;;;;wBAUiC;UACzB,KAAKC,UAAL,CAAgB9C,MAAhB,GAAyB,CAA7B,EAAgC;eACvB,KAAK8C,UAAL,CAAgB,CAAhB,EAAmBC,SAA1B;;;aAEK,IAAP;;;;;;;;;;;uBAgBUL,IAAZ,EAA0C;;;wCAzBD,EAyBC;;0CAVI,EAUJ;;;;IACxCA,IAAI,IAAIC,MAAM,CAACC,MAAP,CAAc,IAAd,EAAoBF,IAApB,CAAR;;;;;;;;;0BAUa;;;wCAHVM,KAGU;QAHVA,KAGU;;;UACTA,KAAK,CAAChD,MAAN,KAAiB,CAArB,EAAwB;cAChB,IAAIR,KAAJ,CAAU,iBAAV,CAAN;;;MAGFwD,KAAK,CAACC,OAAN,CAAc,UAAAC,IAAI,EAAI;YAChBA,IAAI,YAAYL,WAApB,EAAiC;UAC/B,KAAI,CAACM,YAAL,GAAoB,KAAI,CAACA,YAAL,CAAkBC,MAAlB,CAAyBF,IAAI,CAACC,YAA9B,CAApB;SADF,MAEO,IAAID,IAAI,YAAYT,sBAApB,EAA4C;UACjD,KAAI,CAACU,YAAL,CAAkBZ,IAAlB,CAAuBW,IAAvB;SADK,MAEA;UACL,KAAI,CAACC,YAAL,CAAkBZ,IAAlB,CAAuB,IAAIE,sBAAJ,CAA2BS,IAA3B,CAAvB;;OANJ;aASO,IAAP;;;;;;;;mCAMqB;UACdG,eADc,GACK,IADL,CACdA,eADc;;UAEjB,CAACA,eAAL,EAAsB;cACd,IAAI7D,KAAJ,CAAU,sCAAV,CAAN;;;UAGE,KAAK2D,YAAL,CAAkBnD,MAAlB,GAA2B,CAA/B,EAAkC;cAC1B,IAAIR,KAAJ,CAAU,0BAAV,CAAN;;;UAGI8D,IAAI,GAAG,KAAKR,UAAL,CAAgBS,GAAhB,CAAoB;YAAE9D,SAAF,QAAEA,SAAF;eAAiBA,SAAS,CAACmC,QAAV,EAAjB;OAApB,CAAb;UACI4B,qBAAqB,GAAG,CAA5B;UACIC,2BAA2B,GAAG,CAAlC;UACIC,6BAA6B,GAAG,CAApC;UAEMC,UAAU,GAAG,EAAnB;WAEKR,YAAL,CAAkBF,OAAlB,CAA0B,UAAAW,WAAW,EAAI;QACvCA,WAAW,CAACN,IAAZ,CAAiBL,OAAjB,CAAyB,UAAAY,aAAa,EAAI;cAClCC,MAAM,GAAGD,aAAa,CAACE,MAAd,CAAqBnC,QAArB,EAAf;;cACI,CAAC0B,IAAI,CAACU,QAAL,CAAcF,MAAd,CAAL,EAA4B;gBACtBD,aAAa,CAACI,QAAlB,EAA4B;cAC1BT,qBAAqB,IAAI,CAAzB;;kBACI,CAACK,aAAa,CAACK,WAAnB,EAAgC;gBAC9BT,2BAA2B,IAAI,CAA/B;;aAHJ,MAKO;kBACD,CAACI,aAAa,CAACK,WAAnB,EAAgC;gBAC9BR,6BAA6B,IAAI,CAAjC;;;;YAGJJ,IAAI,CAACf,IAAL,CAAUuB,MAAV;;SAbJ;YAiBMK,SAAS,GAAGP,WAAW,CAACO,SAAZ,CAAsBvC,QAAtB,EAAlB;;YACI,CAAC+B,UAAU,CAACK,QAAX,CAAoBG,SAApB,CAAL,EAAqC;UACnCR,UAAU,CAACpB,IAAX,CAAgB4B,SAAhB;;OApBJ;MAwBAR,UAAU,CAACV,OAAX,CAAmB,UAAAkB,SAAS,EAAI;YAC1B,CAACb,IAAI,CAACU,QAAL,CAAcG,SAAd,CAAL,EAA+B;UAC7Bb,IAAI,CAACf,IAAL,CAAU4B,SAAV;UACAT,6BAA6B,IAAI,CAAjC;;OAHJ;;UAOIF,qBAAqB,GAAG,KAAKV,UAAL,CAAgB9C,MAA5C,EAAoD;cAC5C,IAAIR,KAAJ,4CACgCgE,qBADhC,sBAEF,KAAKV,UAAL,CAAgB9C,MAFd,EAAN;;;UAOEoE,QAAQ,GAAG,EAAf;MACAC,YAAA,CAAsBD,QAAtB,EAAgCd,IAAI,CAACtD,MAArC;UAEMmD,YAAY,GAAG,KAAKA,YAAL,CAAkBI,GAAlB,CAAsB,UAAAK,WAAW,EAAI;YACjDlC,IADiD,GAC9BkC,WAD8B,CACjDlC,IADiD;YAC3CyC,SAD2C,GAC9BP,WAD8B,CAC3CO,SAD2C;YAEpDG,eAAe,GAAG,EAAtB;QACAD,YAAA,CAAsBC,eAAtB,EAAuCV,WAAW,CAACN,IAAZ,CAAiBtD,MAAxD;YACIuE,SAAS,GAAG,EAAhB;QACAF,YAAA,CAAsBE,SAAtB,EAAiCX,WAAW,CAAClC,IAAZ,CAAiB1B,MAAlD;eACO;UACLwE,cAAc,EAAElB,IAAI,CAACmB,OAAL,CAAaN,SAAS,CAACvC,QAAV,EAAb,CADX;UAEL0C,eAAe,EAAEvE,MAAM,CAAC+B,IAAP,CAAYwC,eAAZ,CAFZ;UAGLI,UAAU,EAAE3E,MAAM,CAAC+B,IAAP,CACV8B,WAAW,CAACN,IAAZ,CAAiBC,GAAjB,CAAqB,UAAAoB,MAAM;mBACzBrB,IAAI,CAACmB,OAAL,CAAaE,MAAM,CAACZ,MAAP,CAAcnC,QAAd,EAAb,CADyB;WAA3B,CADU,CAHP;UAQLgD,UAAU,EAAE7E,MAAM,CAAC+B,IAAP,CAAYyC,SAAZ,CARP;UASL7C,IAAI,EAAJA;SATF;OANmB,CAArB;MAmBAyB,YAAY,CAACF,OAAb,CAAqB,UAAAW,WAAW,EAAI;QAClCiB,MAAS,CAACjB,WAAW,CAACY,cAAZ,IAA8B,CAA/B,CAAT;QACAZ,WAAW,CAACc,UAAZ,CAAuBzB,OAAvB,CAA+B,UAAA6B,QAAQ;iBAAID,MAAS,CAACC,QAAQ,IAAI,CAAb,CAAb;SAAvC;OAFF;UAKIC,gBAAgB,GAAG,EAAvB;MACAV,YAAA,CAAsBU,gBAAtB,EAAwC5B,YAAY,CAACnD,MAArD;UACIgF,iBAAiB,GAAGjF,MAAM,CAACG,KAAP,CAAasC,gBAAb,CAAxB;MACAzC,MAAM,CAAC+B,IAAP,CAAYiD,gBAAZ,EAA8B5E,IAA9B,CAAmC6E,iBAAnC;UACIC,uBAAuB,GAAGF,gBAAgB,CAAC/E,MAA/C;MAEAmD,YAAY,CAACF,OAAb,CAAqB,UAAAW,WAAW,EAAI;YAC5BsB,iBAAiB,GAAGjE,mBAAA,CAAoB,CAC5CA,eAAA,CAAgB,gBAAhB,CAD4C,EAG5CA,iBAAA,CACE2C,WAAW,CAACU,eAAZ,CAA4BtE,MAD9B,EAEE,iBAFF,CAH4C,EAO5CiB,gBAAA,CACEA,eAAA,CAAgB,UAAhB,CADF,EAEE2C,WAAW,CAACc,UAAZ,CAAuB1E,MAFzB,EAGE,YAHF,CAP4C,EAY5CiB,iBAAA,CAAkB2C,WAAW,CAACgB,UAAZ,CAAuB5E,MAAzC,EAAiD,YAAjD,CAZ4C,EAa5CiB,gBAAA,CACEA,eAAA,CAAgB,WAAhB,CADF,EAEE2C,WAAW,CAAClC,IAAZ,CAAiB1B,MAFnB,EAGE,MAHF,CAb4C,CAApB,CAA1B;YAmBMA,MAAM,GAAGkF,iBAAiB,CAACvF,MAAlB,CACbiE,WADa,EAEboB,iBAFa,EAGbC,uBAHa,CAAf;QAKAA,uBAAuB,IAAIjF,MAA3B;OAzBF;MA2BAgF,iBAAiB,GAAGA,iBAAiB,CAACG,KAAlB,CAAwB,CAAxB,EAA2BF,uBAA3B,CAApB;UAEMG,cAAc,GAAGnE,mBAAA,CAAoB,CACzCA,iBAAA,CAAkB,CAAlB,EAAqB,uBAArB,CADyC,EAEzCA,iBAAA,CAAkB,CAAlB,EAAqB,6BAArB,CAFyC,EAGzCA,iBAAA,CAAkB,CAAlB,EAAqB,+BAArB,CAHyC,EAIzCA,iBAAA,CAAkBmD,QAAQ,CAACpE,MAA3B,EAAmC,UAAnC,CAJyC,EAKzCiB,gBAAA,CAAiBoE,SAAA,CAAiB,KAAjB,CAAjB,EAA0C/B,IAAI,CAACtD,MAA/C,EAAuD,MAAvD,CALyC,EAMzCqF,SAAA,CAAiB,iBAAjB,CANyC,CAApB,CAAvB;UASMC,WAAW,GAAG;QAClB9B,qBAAqB,EAAEzD,MAAM,CAAC+B,IAAP,CAAY,CAAC,KAAKgB,UAAL,CAAgB9C,MAAjB,CAAZ,CADL;QAElByD,2BAA2B,EAAE1D,MAAM,CAAC+B,IAAP,CAAY,CAAC2B,2BAAD,CAAZ,CAFX;QAGlBC,6BAA6B,EAAE3D,MAAM,CAAC+B,IAAP,CAAY,CACzC4B,6BADyC,CAAZ,CAHb;QAMlBU,QAAQ,EAAErE,MAAM,CAAC+B,IAAP,CAAYsC,QAAZ,CANQ;QAOlBd,IAAI,EAAEA,IAAI,CAACC,GAAL,CAAS,UAAAgC,GAAG;iBAAI,IAAIxG,SAAJ,CAAcwG,GAAd,EAAmB3F,QAAnB,EAAJ;SAAZ,CAPY;QAQlByD,eAAe,EAAEtD,MAAM,CAAC+B,IAAP,CAAYzC,IAAI,CAACC,MAAL,CAAY+D,eAAZ,CAAZ;OARnB;UAWImC,QAAQ,GAAGzF,MAAM,CAACG,KAAP,CAAa,IAAb,CAAf;UACMF,MAAM,GAAGoF,cAAc,CAACzF,MAAf,CAAsB2F,WAAtB,EAAmCE,QAAnC,CAAf;MACAR,iBAAiB,CAAC7E,IAAlB,CAAuBqF,QAAvB,EAAiCxF,MAAjC;MACAwF,QAAQ,GAAGA,QAAQ,CAACL,KAAT,CAAe,CAAf,EAAkBnF,MAAM,GAAGgF,iBAAiB,CAAChF,MAA7C,CAAX;aAEOwF,QAAP;;;;;;;;;;;;;;;;2BAc+B;WAC1BC,WAAL;;;;;;;;;;;;;kCAWyD;yCAA5CC,cAA4C;QAA5CA,cAA4C;;;UACrDA,cAAc,CAAC1F,MAAf,KAA0B,CAA9B,EAAiC;cACzB,IAAIR,KAAJ,CAAU,YAAV,CAAN;;;UAEIsD,UAAsC,GAAG4C,cAAc,CAACnC,GAAf,CAC7C,UAAAoC,kBAAkB,EAAI;YACdlG,SAAS,GACbkG,kBAAkB,YAAYpF,OAA9B,GACIoF,kBAAkB,CAAClG,SADvB,GAEIkG,kBAHN;eAIO;UACL5C,SAAS,EAAE,IADN;UAELtD,SAAS,EAATA;SAFF;OAN2C,CAA/C;WAYKqD,UAAL,GAAkBA,UAAlB;;UACM0C,QAAQ,GAAG,KAAKI,YAAL,EAAjB;;MAEAF,cAAc,CAACzC,OAAf,CAAuB,UAAC0C,kBAAD,EAAqBE,KAArB,EAA+B;YAChDF,kBAAkB,YAAY5G,SAAlC,EAA6C;;;;YAGvCgE,SAAS,GAAGrC,IAAI,CAACC,IAAL,CAAUmF,QAAV,CAChBN,QADgB,EAEhBG,kBAAkB,CAACnF,SAFH,CAAlB;QAIAqE,MAAS,CAAC9B,SAAS,CAAC/C,MAAV,KAAqB,EAAtB,CAAT;QACA8C,UAAU,CAAC+C,KAAD,CAAV,CAAkB9C,SAAlB,GAA8BhD,MAAM,CAAC+B,IAAP,CAAYiB,SAAZ,CAA9B;OATF;;;;;;;;;;8BAkBQgD,MA3QZ,EA2Q6B;UACnBF,KAAK,GAAG,KAAK/C,UAAL,CAAgBkD,SAAhB,CAA0B,UAAAC,OAAO;eAC7CF,MAAM,CAACtG,SAAP,CAAiByG,MAAjB,CAAwBD,OAAO,CAACxG,SAAhC,CAD6C;OAAjC,CAAd;;UAGIoG,KAAK,GAAG,CAAZ,EAAe;cACP,IAAIrG,KAAJ,2BAA6BuG,MAAM,CAACtG,SAAP,CAAiBmC,QAAjB,EAA7B,EAAN;;;UAGI4D,QAAQ,GAAG,KAAKI,YAAL,EAAjB;;UACM7C,SAAS,GAAGrC,IAAI,CAACC,IAAL,CAAUmF,QAAV,CAAmBN,QAAnB,EAA6BO,MAAM,CAACvF,SAApC,CAAlB;MACAqE,MAAS,CAAC9B,SAAS,CAAC/C,MAAV,KAAqB,EAAtB,CAAT;WACK8C,UAAL,CAAgB+C,KAAhB,EAAuB9C,SAAvB,GAAmChD,MAAM,CAAC+B,IAAP,CAAYiB,SAAZ,CAAnC;;;;;;;;;;gCAQkB;UACXD,UADW,GACG,IADH,CACXA,UADW;;UAEd,CAACA,UAAL,EAAiB;cACT,IAAItD,KAAJ,CAAU,iCAAV,CAAN;;;UAGIgG,QAAQ,GAAG,KAAKI,YAAL,EAAjB;;UACMO,cAAc,GAAG,EAAvB;MACA9B,YAAA,CAAsB8B,cAAtB,EAAsCrD,UAAU,CAAC9C,MAAjD;UACMoG,iBAAiB,GACrBD,cAAc,CAACnG,MAAf,GAAwB8C,UAAU,CAAC9C,MAAX,GAAoB,EAA5C,GAAiDwF,QAAQ,CAACxF,MAD5D;UAEMqG,eAAe,GAAGtG,MAAM,CAACG,KAAP,CAAakG,iBAAb,CAAxB;MACAvB,MAAS,CAAC/B,UAAU,CAAC9C,MAAX,GAAoB,GAArB,CAAT;MACAD,MAAM,CAAC+B,IAAP,CAAYqE,cAAZ,EAA4BhG,IAA5B,CAAiCkG,eAAjC,EAAkD,CAAlD;MACAvD,UAAU,CAACG,OAAX,CAAmB,iBAAc4C,KAAd,EAAwB;YAAtB9C,SAAsB,SAAtBA,SAAsB;QACzC8B,MAAS,CAAC9B,SAAS,KAAK,IAAf,mBAAT;QACA8B,MAAS,CAAC9B,SAAS,CAAC/C,MAAV,KAAqB,EAAtB,iCAAT;QACAD,MAAM,CAAC+B,IAAP,CAAYiB,SAAZ,EAAuB5C,IAAvB,CACEkG,eADF,EAEEF,cAAc,CAACnG,MAAf,GAAwB6F,KAAK,GAAG,EAFlC;OAHF;MAQAL,QAAQ,CAACrF,IAAT,CACEkG,eADF,EAEEF,cAAc,CAACnG,MAAf,GAAwB8C,UAAU,CAAC9C,MAAX,GAAoB,EAF9C;MAIA6E,MAAS,CACPwB,eAAe,CAACrG,MAAhB,IAA0BwC,gBADnB,mCAEmB6D,eAAe,CAACrG,MAFnC,gBAE+CwC,gBAF/C,EAAT;aAIO6D,eAAP;;;;;;;;;wBAO2B;MAC3BxB,MAAS,CAAC,KAAK1B,YAAL,CAAkBnD,MAAlB,KAA6B,CAA9B,CAAT;aACO,KAAKmD,YAAL,CAAkB,CAAlB,EAAqBG,IAArB,CAA0BC,GAA1B,CAA8B,UAAAoB,MAAM;eAAIA,MAAM,CAACZ,MAAX;OAApC,CAAP;;;;;;;;;wBAOyB;MACzBc,MAAS,CAAC,KAAK1B,YAAL,CAAkBnD,MAAlB,KAA6B,CAA9B,CAAT;aACO,KAAKmD,YAAL,CAAkB,CAAlB,EAAqBgB,SAA5B;;;;;;;;;wBAOiB;MACjBU,MAAS,CAAC,KAAK1B,YAAL,CAAkBnD,MAAlB,KAA6B,CAA9B,CAAT;aACO,KAAKmD,YAAL,CAAkB,CAAlB,EAAqBzB,IAA5B;;;;;;;;yBAMUF,MA7Vd,EA6V2C;UACjC8E,aAAa,GAAG,EAAtB;UACMC,gBAAgB,GAAG,EAAzB;;eAESC,aAAT,CACEC,CADF,EAEEjD,qBAFF,EAGEC,2BAHF,EAIEC,6BAJF,EAKEgD,OALF,EAMW;eAEPD,CAAC,GAAGjD,qBAAqB,GAAGC,2BAA5B,IACCgD,CAAC,IAAIjD,qBAAL,IACCiD,CAAC,GAAGC,OAAO,GAAGhD,6BAHlB;;;UAOE4B,WAAW,GAAG,IAAIzC,WAAJ,EAAlB,CAlBuC;;UAqBnC8D,SAAS,sBAAOnF,MAAP,CAAb;;UAEM2E,cAAc,GAAG9B,YAAA,CAAsBsC,SAAtB,CAAvB;UACI7D,UAAU,GAAG,EAAjB;;WACK,IAAI2D,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGN,cAApB,EAAoCM,CAAC,EAArC,EAAyC;YACjC1D,SAAS,GAAG4D,SAAS,CAACxB,KAAV,CAAgB,CAAhB,EAAmBoB,gBAAnB,CAAlB;QACAI,SAAS,GAAGA,SAAS,CAACxB,KAAV,CAAgBoB,gBAAhB,CAAZ;QACAzD,UAAU,CAACP,IAAX,CAAgBQ,SAAhB;;;UAGIS,qBAAqB,GAAGmD,SAAS,CAACvE,KAAV,EAA9B,CA/BuC;;UAiCjCqB,2BAA2B,GAAGkD,SAAS,CAACvE,KAAV,EAApC,CAjCuC;;UAmCjCsB,6BAA6B,GAAGiD,SAAS,CAACvE,KAAV,EAAtC,CAnCuC;;UAsCjCwE,YAAY,GAAGvC,YAAA,CAAsBsC,SAAtB,CAArB;UACIE,QAAQ,GAAG,EAAf;;WACK,IAAIJ,EAAC,GAAG,CAAb,EAAgBA,EAAC,GAAGG,YAApB,EAAkCH,EAAC,EAAnC,EAAuC;YAC/BK,OAAO,GAAGH,SAAS,CAACxB,KAAV,CAAgB,CAAhB,EAAmBmB,aAAnB,CAAhB;QACAK,SAAS,GAAGA,SAAS,CAACxB,KAAV,CAAgBmB,aAAhB,CAAZ;QACAO,QAAQ,CAACtE,IAAT,CAAcuE,OAAd;;;UAGIzD,eAAe,GAAGsD,SAAS,CAACxB,KAAV,CAAgB,CAAhB,EAAmBmB,aAAnB,CAAxB;MACAK,SAAS,GAAGA,SAAS,CAACxB,KAAV,CAAgBmB,aAAhB,CAAZ;UAEMvB,gBAAgB,GAAGV,YAAA,CAAsBsC,SAAtB,CAAzB;UACIxD,YAAY,GAAG,EAAnB;;WACK,IAAIsD,GAAC,GAAG,CAAb,EAAgBA,GAAC,GAAG1B,gBAApB,EAAsC0B,GAAC,EAAvC,EAA2C;YACrC7C,WAAW,GAAG,EAAlB;QACAA,WAAW,CAACmD,YAAZ,GAA2BJ,SAAS,CAACvE,KAAV,EAA3B;YACM4E,iBAAiB,GAAG3C,YAAA,CAAsBsC,SAAtB,CAA1B;QACA/C,WAAW,CAACqD,YAAZ,GAA2BN,SAAS,CAACxB,KAAV,CAAgB,CAAhB,EAAmB6B,iBAAnB,CAA3B;QACAL,SAAS,GAAGA,SAAS,CAACxB,KAAV,CAAgB6B,iBAAhB,CAAZ;YACMpC,UAAU,GAAGP,YAAA,CAAsBsC,SAAtB,CAAnB;QACA/C,WAAW,CAAClC,IAAZ,GAAmBiF,SAAS,CAACxB,KAAV,CAAgB,CAAhB,EAAmBP,UAAnB,CAAnB;QACA+B,SAAS,GAAGA,SAAS,CAACxB,KAAV,CAAgBP,UAAhB,CAAZ;QACAzB,YAAY,CAACZ,IAAb,CAAkBqB,WAAlB;OA5DqC;;;MAgEvC0B,WAAW,CAACjC,eAAZ,GAA8B,IAAItE,SAAJ,CAAcsE,eAAd,EAA+BjD,QAA/B,EAA9B;;WACK,IAAIqG,GAAC,GAAG,CAAb,EAAgBA,GAAC,GAAGN,cAApB,EAAoCM,GAAC,EAArC,EAAyC;YACjCS,aAAa,GAAG;UACpBnE,SAAS,EAAEhD,MAAM,CAAC+B,IAAP,CAAYgB,UAAU,CAAC2D,GAAD,CAAtB,CADS;UAEpBhH,SAAS,EAAE,IAAIV,SAAJ,CAAc8H,QAAQ,CAACJ,GAAD,CAAtB;SAFb;QAIAnB,WAAW,CAACxC,UAAZ,CAAuBP,IAAvB,CAA4B2E,aAA5B;;;WAEG,IAAIT,GAAC,GAAG,CAAb,EAAgBA,GAAC,GAAG1B,gBAApB,EAAsC0B,GAAC,EAAvC,EAA2C;YACrCU,eAAe,GAAG;UACpB7D,IAAI,EAAE,EADc;UAEpBa,SAAS,EAAE,IAAIpF,SAAJ,CAAc8H,QAAQ,CAAC1D,YAAY,CAACsD,GAAD,CAAZ,CAAgBM,YAAjB,CAAtB,CAFS;UAGpBrF,IAAI,EAAE3B,MAAM,CAAC+B,IAAP,CAAYqB,YAAY,CAACsD,GAAD,CAAZ,CAAgB/E,IAA5B;SAHR;;mCAKS0F,CANgC;cAOjCrD,MAAM,GAAG,IAAIhF,SAAJ,CAAc8H,QAAQ,CAAC1D,YAAY,CAACsD,GAAD,CAAZ,CAAgBQ,YAAhB,CAA6BG,CAA7B,CAAD,CAAtB,CAAf;UAEAD,eAAe,CAAC7D,IAAhB,CAAqBf,IAArB,CAA0B;YACxBwB,MAAM,EAANA,MADwB;YAExBE,QAAQ,EAAEqB,WAAW,CAACxC,UAAZ,CAAuBuE,IAAvB,CACR,UAAA1C,MAAM;qBAAIA,MAAM,CAAClF,SAAP,CAAiBmC,QAAjB,OAAgCmC,MAAM,CAACnC,QAAP,EAApC;aADE,CAFc;YAKxBsC,WAAW,EAAEsC,aAAa,CACxBY,CADwB,EAExB5D,qBAFwB,EAGxBC,2BAHwB,EAIxBC,6BAJwB,EAKxBmD,QAAQ,CAAC7G,MALe;WAL5B;;;aAHG,IAAIoH,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGjE,YAAY,CAACsD,GAAD,CAAZ,CAAgBQ,YAAhB,CAA6BjH,MAAjD,EAAyDoH,CAAC,EAA1D,EAA8D;gBAArDA,CAAqD;;;YAiB1DxD,YAAW,GAAG,IAAInB,sBAAJ,CAA2B0E,eAA3B,CAAlB;;QACA7B,WAAW,CAACnC,YAAZ,CAAyBZ,IAAzB,CAA8BqB,YAA9B;;;aAEK0B,WAAP;;;;;;;AC3hBJ;AACA,AAAO,SAASgC,KAAT,CAAeC,EAAf,EAA0C;SACxC,IAAIC,OAAJ,CAAY,UAAAC,OAAO;WAAIC,UAAU,CAACD,OAAD,EAAUF,EAAV,CAAd;GAAnB,CAAP;;;ACgDF,SAASI,gBAAT,CAA0BC,GAA1B,EAA2C;MACnCC,MAAM,GAAGC,MAAM;;;;;6BAAC,iBAAOC,OAAP,EAAgBC,QAAhB;;;;;;cACdC,OADc,GACJ;gBACdC,MAAM,EAAE,MADM;gBAEdC,IAAI,EAAEJ,OAFQ;gBAGdK,OAAO,EAAE;kCACS;;eALA;;;qBAUAC,KAAK,CAACT,GAAD,EAAMK,OAAN,CAVL;;;cAUZK,GAVY;;qBAWCA,GAAG,CAACC,IAAJ,EAXD;;;cAWZA,IAXY;cAYlBP,QAAQ,CAAC,IAAD,EAAOO,IAAP,CAAR;;;;;;;cAEAP,QAAQ,aAAR;;;;;;;;KAdiB;;;;;MAArB;SAkBO,UAACE,MAAD,EAASM,IAAT,EAAkB;WAChB,IAAIhB,OAAJ,CAAY,UAACC,OAAD,EAAUgB,MAAV,EAAqB;MACtCZ,MAAM,CAACE,OAAP,CAAeG,MAAf,EAAuBM,IAAvB,EAA6B,UAACE,GAAD,EAAMC,QAAN,EAAmB;YAC1CD,GAAJ,EAAS;UACPD,MAAM,CAACC,GAAD,CAAN;;;;QAGFjB,OAAO,CAACkB,QAAD,CAAP;OALF;KADK,CAAP;GADF;;;;;;;AAgBF,IAAMC,mBAAmB,GAAGC,kBAAM,CAAC;EACjCC,OAAO,EAAED,kBAAM,CAACE,OAAP,CAAe,KAAf,CADwB;EAEjCC,EAAE,EAAE,QAF6B;EAGjCC,KAAK,EAAE,MAH0B;EAIjCC,MAAM,EAAE;CAJwB,CAAlC;;;;;AAUA,SAASC,aAAT,CAAuBC,iBAAvB,EAA+C;MACvCC,cAAc,GAAGR,kBAAM,CAACE,OAAP,CAAe,KAAf,CAAvB;SACOF,kBAAM,CAACS,KAAP,CAAa,CAClBT,kBAAM,CAAC;IACLC,OAAO,EAAEO,cADJ;IAELL,EAAE,EAAE,QAFC;IAGLC,KAAK,EAAE;GAHH,CADY,EAMlBJ,kBAAM,CAAC;IACLC,OAAO,EAAEO,cADJ;IAELL,EAAE,EAAE,QAFC;IAGLC,KAAK,EAAE,OAHF;IAILC,MAAM,EAAEE;GAJJ,CANY,CAAb,CAAP;;;;;;;AAkBF,IAAMG,iBAAiB,GAAGV,kBAAM,CAAC;EAC/BW,UAAU,EAAE,SADmB;EAE/BC,KAAK,EAAE,OAFwB;EAG/BC,QAAQ,EAAE,QAHqB;EAI/BhI,IAAI,EAAE;CAJwB,CAAhC;;;;;AAUA,IAAMiI,uBAAuB,GAAGR,aAAa,CAACI,iBAAD,CAA7C;;;;;AAKA,IAAMK,yBAAyB,GAAGf,kBAAM,CAAC;EACvCgB,YAAY,EAAE,QADyB;EAEvCX,MAAM,EAAEK;CAF8B,CAAxC;;;;;AAQA,IAAMO,wBAAwB,GAAGjB,kBAAM,CAAC,CAAC,QAAD,EAAWU,iBAAX,CAAD,CAAvC;;;;;AAKA,IAAMQ,gCAAgC,GAAGlB,kBAAM,CAAC;EAC9CgB,YAAY,EAAE,QADgC;EAE9CX,MAAM,EAAEY;CAFqC,CAA/C;;;;;AAQA,IAAME,2BAA2B,GAAGb,aAAa,CAAC,SAAD,CAAjD;;;;;AAKA,IAAMc,aAAa,GAAGd,aAAa,CAAC,QAAD,CAAnC;;;;;AAKA,IAAMe,eAAe,GAAGf,aAAa,CACnCN,kBAAM,CAACsB,IAAP,CAAY,CACVtB,kBAAM,CAAC;EACL9E,MAAM,EAAE,QADH;EAELqG,MAAM,EAAE,QAFH;EAGLC,GAAG,EAAExB,kBAAM,CAACS,KAAP,CAAa,CAAC,MAAD,EAAS,QAAT,CAAb,CAHA;EAILgB,GAAG,EAAEzB,kBAAM,CAACS,KAAP,CAAa,CAAC,MAAD,EAAS,QAAT,CAAb;CAJD,CADI,CAAZ,CADmC,CAArC;;;;;AAaA,IAAMiB,mBAAmB,GAAGpB,aAAa,CACvCN,kBAAM,CAACsB,IAAP,CAAY,CACVtB,kBAAM,CAAC;EACLG,EAAE,EAAE,QADC;EAELoB,MAAM,EAAE,QAFH;EAGLC,GAAG,EAAExB,kBAAM,CAACS,KAAP,CAAa,CAAC,MAAD,EAAS,QAAT,CAAb,CAHA;EAILgB,GAAG,EAAEzB,kBAAM,CAACS,KAAP,CAAa,CAAC,MAAD,EAAS,QAAT,CAAb;CAJD,CADI,CAAZ,CADuC,CAAzC;;;;;AAcA,IAAMkB,oBAAoB,GAAGrB,aAAa,CACxCN,kBAAM,CAACsB,IAAP,CAAY,CACVtB,kBAAM,CAAC;EACL4B,UAAU,EAAE,QADP;EAELC,UAAU,EAAE,QAFP;EAGLC,KAAK,EAAE,QAHF;EAILC,UAAU,EAAE;CAJR,CADI,CAAZ,CADwC,CAA1C;;;;;AAcA,IAAMC,2BAA2B,GAAG1B,aAAa,CAC/CN,kBAAM,CAACS,KAAP,CAAa,CACX,MADW,EAEXT,kBAAM,CAACS,KAAP,CAAa,CAACT,kBAAM,CAAC;EAACiC,EAAE,EAAE;CAAN,CAAP,EAAuBjC,kBAAM,CAAC;EAACkC,GAAG,EAAE;CAAP,CAA7B,CAAb,CAFW,CAAb,CAD+C,CAAjD;;;;;AAUA,IAAMC,4BAA4B,GAAG7B,aAAa,CAAC,QAAD,CAAlD;;;;;AAKA,IAAM8B,kBAAkB,GAAG9B,aAAa,CAAC,CACvC,QADuC,EAEvCN,kBAAM,CAAC;EACLqC,oBAAoB,EAAE,QADjB;EAELC,uBAAuB,EAAE,QAFpB;EAGLC,uBAAuB,EAAE,QAHpB;EAILC,0BAA0B,EAAE,QAJvB;EAKLC,uBAAuB,EAAE;CALrB,CAFiC,CAAD,CAAxC;;;;;AAaA,IAAMC,sBAAsB,GAAGpC,aAAa,CAAC,CAC3C,QAD2C,EAE3CN,kBAAM,CAAC;EACLqC,oBAAoB,EAAE;CADlB,CAFqC,CAAD,CAA5C;;;;;AAUA,IAAMM,uBAAuB,GAAGrC,aAAa,CAAC,QAAD,CAA7C;;;;;AAKA,IAAMsC,wBAAwB,GAAGtC,aAAa,CAAC,QAAD,CAA9C;;;;;;;;;;;;;;;;AAsFA,IAAauC,UAAb;;AAAA;;;;;;sBAuBcC,QAAZ,EAA8B;;;;;;;oDApBI,KAoBJ;;;;sDAbM,KAaN;;yDAZqC,EAYrC;;+DAXc,CAWd;;gEAR1B,EAQ0B;;sEAPqB,CAOrB;;QACxB/D,KAAG,GAAGgE,SAAQ,CAACD,QAAD,CAAlB;SAEKE,WAAL,GAAmBlE,gBAAgB,CAACC,KAAG,CAACkE,IAAL,CAAnC;SACKC,cAAL,GAAsB;MACpB1I,eAAe,EAAE,IADG;MAEpB2I,OAAO,EAAE,CAAC,CAFU;MAGpBC,qBAAqB,EAAE;KAHzB;IAMArE,KAAG,CAACsE,QAAJ,GAAetE,KAAG,CAACsE,QAAJ,KAAiB,QAAjB,GAA4B,MAA5B,GAAqC,KAApD;IACAtE,KAAG,CAACuE,IAAJ,GAAW,EAAX;IACAvE,KAAG,CAACwE,IAAJ,GAAWC,MAAM,CAACC,MAAM,CAAC1E,KAAG,CAACwE,IAAL,CAAN,GAAmB,CAApB,CAAjB;;QACIxE,KAAG,CAACwE,IAAJ,KAAa,GAAjB,EAAsB;MACpBxE,KAAG,CAACwE,IAAJ,GAAWxE,KAAG,CAACsE,QAAJ,KAAiB,MAAjB,GAA0B,MAA1B,GAAmC,MAA9C;;;SAEGK,aAAL,GAAqB,IAAIC,oBAAJ,CAAuBC,UAAS,CAAC7E,KAAD,CAAhC,EAAuC;MAC1D8E,WAAW,EAAE,KAD6C;MAE1DC,cAAc,EAAEC;KAFG,CAArB;;SAIKL,aAAL,CAAmBM,EAAnB,CAAsB,MAAtB,EAA8B,KAAKC,SAAL,CAAexL,IAAf,CAAoB,IAApB,CAA9B;;SACKiL,aAAL,CAAmBM,EAAnB,CAAsB,OAAtB,EAA+B,KAAKE,UAAL,CAAgBzL,IAAhB,CAAqB,IAArB,CAA/B;;SACKiL,aAAL,CAAmBM,EAAnB,CAAsB,OAAtB,EAA+B,KAAKG,UAAL,CAAgB1L,IAAhB,CAAqB,IAArB,CAA/B;;SACKiL,aAAL,CAAmBM,EAAnB,CACE,qBADF,EAEE,KAAKI,wBAAL,CAA8B3L,IAA9B,CAAmC,IAAnC,CAFF;;SAIKiL,aAAL,CAAmBM,EAAnB,CACE,qBADF,EAEE,KAAKK,+BAAL,CAAqC5L,IAArC,CAA0C,IAA1C,CAFF;;;;;;;;;;;;iDASe7B,SA3DnB;;;;;;;uBA4D4B,KAAKoM,WAAL,CAAiB,YAAjB,EAA+B,CACrDpM,SAAS,CAACW,QAAV,EADqD,CAA/B,CA5D5B;;;gBA4DU+M,SA5DV;gBA+DU7E,GA/DV,GA+DgBM,mBAAmB,CAACuE,SAAD,CA/DnC;;qBAgEQ7E,GAAG,CAACW,KAhEZ;;;;;sBAiEY,IAAIzJ,KAAJ,CAAU8I,GAAG,CAACW,KAAJ,CAAUmE,OAApB,CAjEZ;;;gBAmEIC,MAAM,CAAC,OAAO/E,GAAG,CAACY,MAAX,KAAsB,WAAvB,CAAN;kDACOZ,GAAG,CAACY,MApEf;;;;;;;;;;;;;;;;;;;;;;;;;iDA0EuBzJ,SA1EvB;;;;;;;uBA2E4B,KAAKoM,WAAL,CAAiB,gBAAjB,EAAmC,CACzDpM,SAAS,CAACW,QAAV,EADyD,CAAnC,CA3E5B;;;gBA2EU+M,SA3EV;gBA8EU7E,GA9EV,GA8EgBqB,uBAAuB,CAACwD,SAAD,CA9EvC;;qBA+EQ7E,GAAG,CAACW,KA/EZ;;;;;sBAgFY,IAAIzJ,KAAJ,CAAU8I,GAAG,CAACW,KAAJ,CAAUmE,OAApB,CAhFZ;;;gBAmFWlE,MAnFX,GAmFqBZ,GAnFrB,CAmFWY,MAnFX;gBAoFImE,MAAM,CAAC,OAAOnE,MAAP,KAAkB,WAAnB,CAAN;kDAEO;kBACLM,UAAU,EAAEN,MAAM,CAACM,UADd;kBAELC,KAAK,EAAEP,MAAM,CAACO,KAFT;kBAGLC,QAAQ,EAAER,MAAM,CAACQ,QAHZ;kBAILhI,IAAI,EAAEwH,MAAM,CAACxH;iBA1FnB;;;;;;;;;;;;;;;;;;;;;;;;;iDAiG2BqB,SAjG3B;;;;;;;uBAkG4B,KAAK8I,WAAL,CAAiB,oBAAjB,EAAuC,CAAC9I,SAAD,CAAvC,CAlG5B;;;gBAkGUoK,SAlGV;gBAmGU7E,GAnGV,GAmGgB0B,2BAA2B,CAACmD,SAAD,CAnG3C;;qBAoGQ7E,GAAG,CAACW,KApGZ;;;;;sBAqGY,IAAIzJ,KAAJ,CAAU8I,GAAG,CAACW,KAAJ,CAAUmE,OAApB,CArGZ;;;gBAuGIC,MAAM,CAAC,OAAO/E,GAAG,CAACY,MAAX,KAAsB,WAAvB,CAAN;kDACOZ,GAAG,CAACY,MAxGf;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;uBA+G4B,KAAK2C,WAAL,CAAiB,iBAAjB,EAAoC,EAApC,CA/G5B;;;gBA+GUsB,SA/GV;;gBAmHYG,OAnHZ,GAmHsB/C,mBAAmB,CAAC4C,SAAD,CAnHzC;;qBAoHUG,OAAO,CAACrE,KApHlB;;;;;gBAqHQsE,OAAO,CAACC,GAAR,CAAY,IAAZ,EAAkBF,OAAO,CAACrE,KAA1B;sBACM,IAAIzJ,KAAJ,CAAU8N,OAAO,CAACrE,KAAR,CAAcmE,OAAxB,CAtHd;;;kDAwHaE,OAAO,CAACpE,MAAR,CAAe3F,GAAf,CAAmB,UAAAkK,IAAI,EAAI;kBAChCA,IAAI,CAAC1J,MAAL,GAAc0J,IAAI,CAACzE,EAAnB;kBACAyE,IAAI,CAACzE,EAAL,GAAU0E,SAAV;yBACOD,IAAP;iBAHK,CAxHb;;;;;;;;gBAkIUnF,GAlIV,GAkIgB4B,eAAe,CAACiD,SAAD,CAlI/B;;qBAmIQ7E,GAAG,CAACW,KAnIZ;;;;;sBAoIY,IAAIzJ,KAAJ,CAAU8I,GAAG,CAACW,KAAJ,CAAUmE,OAApB,CApIZ;;;gBAsIIC,MAAM,CAAC,OAAO/E,GAAG,CAACY,MAAX,KAAsB,WAAvB,CAAN;kDACOZ,GAAG,CAACY,MAvIf;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;uBA8I4B,KAAK2C,WAAL,CAAiB,sBAAjB,EAAyC,EAAzC,CA9I5B;;;gBA8IUsB,SA9IV;gBA+IU7E,GA/IV,GA+IgBkC,oBAAoB,CAAC2C,SAAD,CA/IpC;;qBAiJQ7E,GAAG,CAACW,KAjJZ;;;;;sBAkJY,IAAIzJ,KAAJ,CAAU8I,GAAG,CAACW,KAAJ,CAAUmE,OAApB,CAlJZ;;;gBAoJIC,MAAM,CAAC,OAAO/E,GAAG,CAACY,MAAX,KAAsB,WAAvB,CAAN;kDACOZ,GAAG,CAACY,MArJf;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;uBA4J4B,KAAK2C,WAAL,CAAiB,eAAjB,EAAkC,EAAlC,CA5J5B;;;gBA4JUsB,SA5JV;gBA6JU7E,GA7JV,GA6JgB2B,aAAa,CAACkD,SAAD,CA7J7B;;qBA8JQ7E,GAAG,CAACW,KA9JZ;;;;;sBA+JY,IAAIzJ,KAAJ,CAAU8I,GAAG,CAACW,KAAJ,CAAUmE,OAApB,CA/JZ;;;gBAiKIC,MAAM,CAAC,OAAO/E,GAAG,CAACY,MAAX,KAAsB,WAAvB,CAAN;kDACOZ,GAAG,CAACY,MAlKf;;;;;;;;;;;;;;;;;;;;;;;;;iDAyKInG,SAzKJ;;;;;;;uBA2K4B,KAAK8I,WAAL,CAAiB,oBAAjB,EAAuC,CAAC9I,SAAD,CAAvC,CA3K5B;;;gBA2KUoK,SA3KV;gBA4KU7E,GA5KV,GA4KgBuC,2BAA2B,CAACsC,SAAD,CA5K3C;;qBA6KQ7E,GAAG,CAACW,KA7KZ;;;;;sBA8KY,IAAIzJ,KAAJ,CAAU8I,GAAG,CAACW,KAAJ,CAAUmE,OAApB,CA9KZ;;;gBAgLIC,MAAM,CAAC,OAAO/E,GAAG,CAACY,MAAX,KAAsB,WAAvB,CAAN;kDACOZ,GAAG,CAACY,MAjLf;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;uBAwL4B,KAAK2C,WAAL,CAAiB,qBAAjB,EAAwC,EAAxC,CAxL5B;;;gBAwLUsB,SAxLV;gBAyLU7E,GAzLV,GAyLgB0C,4BAA4B,CAACmC,SAAD,CAzL5C;;qBA0LQ7E,GAAG,CAACW,KA1LZ;;;;;sBA2LY,IAAIzJ,KAAJ,CAAU8I,GAAG,CAACW,KAAJ,CAAUmE,OAApB,CA3LZ;;;gBA6LIC,MAAM,CAAC,OAAO/E,GAAG,CAACY,MAAX,KAAsB,WAAvB,CAAN;kDACOoD,MAAM,CAAChE,GAAG,CAACY,MAAL,CA9LjB;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;uBAqM4B,KAAK2C,WAAL,CAAiB,oBAAjB,EAAuC,EAAvC,CArM5B;;;gBAqMUsB,SArMV;;gBAyMYG,OAzMZ,GAyMsB/B,sBAAsB,CAAC4B,SAAD,CAzM5C;;qBA0MUG,OAAO,CAACrE,KA1MlB;;;;;sBA2Mc,IAAIzJ,KAAJ,CAAU8N,OAAO,CAACrE,KAAR,CAAcmE,OAAxB,CA3Md;;;iDA6MyCE,OAAO,CAACpE,MA7MjD,MA6MayE,SA7Mb,uBA6MwBC,aA7MxB;gBA8MMA,aAAa,CAACtC,uBAAd,GAAwC,EAAxC;gBACAsC,aAAa,CAACvC,0BAAd,GACEuC,aAAa,CAAC1C,oBADhB;mDAGO,CAACyC,SAAD,EAAYC,aAAZ,CAlNb;;;;;;;;gBAwNUtF,GAxNV,GAwNgB2C,kBAAkB,CAACkC,SAAD,CAxNlC;;qBAyNQ7E,GAAG,CAACW,KAzNZ;;;;;sBA0NY,IAAIzJ,KAAJ,CAAU8I,GAAG,CAACW,KAAJ,CAAUmE,OAApB,CA1NZ;;;gBA4NIC,MAAM,CAAC,OAAO/E,GAAG,CAACY,MAAX,KAAsB,WAAvB,CAAN;mDACOZ,GAAG,CAACY,MA7Nf;;;;;;;;;;;;;;;;;;;;;;;;;kDAoOI2E,EApOJ,EAqOIC,MArOJ;;;;;;;uBAuO4B,KAAKjC,WAAL,CAAiB,gBAAjB,EAAmC,CACzDgC,EAAE,CAACzN,QAAH,EADyD,EAEzD0N,MAFyD,CAAnC,CAvO5B;;;gBAuOUX,SAvOV;gBA2OU7E,GA3OV,GA2OgBkD,uBAAuB,CAAC2B,SAAD,CA3OvC;;qBA4OQ7E,GAAG,CAACW,KA5OZ;;;;;sBA6OY,IAAIzJ,KAAJ,CAAU8I,GAAG,CAACW,KAAJ,CAAUmE,OAApB,CA7OZ;;;gBA+OIC,MAAM,CAAC,OAAO/E,GAAG,CAACY,MAAX,KAAsB,WAAvB,CAAN;mDACOZ,GAAG,CAACY,MAhPf;;;;;;;;;;;;;;;;;;;;;;;;;kDAuPI5D,WAvPJ;;;;;;;;;;;;;;;;;;4CAwPOyI,OAxPP;kBAwPOA,OAxPP;;;;;gBA4PY/B,OA5PZ,GA4PsB,IAAIgC,IAAJ,GAAWC,UAAX,EA5PtB;;sBA8PQ,KAAKlC,cAAL,CAAoB1I,eAApB,IAAuC,IAAvC,IACA,KAAK0I,cAAL,CAAoBC,OAApB,GAA8BA,OAAO,GAAG,EA/PhD;;;;;gBAiQQ1G,WAAW,CAACjC,eAAZ,GAA8B,KAAK0I,cAAL,CAAoB1I,eAAlD;gBACAiC,WAAW,CAAC3E,IAAZ,OAAA2E,WAAW,EAASyI,OAAT,CAAX;;oBACKzI,WAAW,CAACvC,SAnQzB;;;;;sBAoQgB,IAAIvD,KAAJ,CAAU,YAAV,CApQhB;;;;;gBAyQcuD,SAzQd,GAyQ0BuC,WAAW,CAACvC,SAAZ,CAAsBnB,QAAtB,EAzQ1B;;oBA0Qa,KAAKmK,cAAL,CAAoBE,qBAApB,CAA0CjI,QAA1C,CAAmDjB,SAAnD,CA1Qb;;;;;qBA2QegJ,cAAL,CAAoBE,qBAApB,CAA0C1J,IAA1C,CAA+CQ,SAA/C;;oBACI,KAAKmL,wBAAT,EAAmC;uBAC5BnC,cAAL,CAAoBC,OAApB,GAA8B,CAAC,CAA/B;;;;;;;gBAOFmC,QApRV,GAoRqB,CApRrB;gBAqRYC,SArRZ,GAqRwBJ,IAAI,CAACK,GAAL,EArRxB;;;;uBA0RkB,KAAKC,kBAAL,EA1RlB;;;;;gBAwRUjL,eAxRV;;sBA4RY,KAAK0I,cAAL,CAAoB1I,eAApB,IAAuCA,eA5RnD;;;;;qBA6Re0I,cAAL,GAAsB;kBACpB1I,eAAe,EAAfA,eADoB;kBAEpB2I,OAAO,EAAE,IAAIgC,IAAJ,GAAWC,UAAX,EAFW;kBAGpBhC,qBAAqB,EAAE;iBAHzB;;;;sBAOEkC,QAAQ,KAAK,EApSzB;;;;;sBAqSgB,IAAI3O,KAAJ,kDACsCwO,IAAI,CAACK,GAAL,KACxCD,SAFE,QArShB;;;;uBA4Sc9G,KAAK,CAAE,MAAMvG,sBAAP,GAAiCD,oBAAlC,CA5SnB;;;kBA8SUqN,QAAF;;;;;;;;;;;gBAIE9H,eAlTV,GAkT4Bf,WAAW,CAACiJ,SAAZ,EAlT5B;;uBAmTiB,KAAKC,kBAAL,CAAwBnI,eAAxB,CAnTjB;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;uBA0T4B,KAAKwF,WAAL,CAAiB,cAAjB,EAAiC,EAAjC,CA1T5B;;;gBA0TUsB,SA1TV;gBA2TU7E,GA3TV,GA2TgBa,aAAa,CAAC,SAAD,CAAb,CAAyBgE,SAAzB,CA3ThB;;qBA4TQ7E,GAAG,CAACW,KA5TZ;;;;;sBA6TY,IAAIzJ,KAAJ,CAAU8I,GAAG,CAACW,KAAJ,CAAUmE,OAApB,CA7TZ;;;gBA+TIC,MAAM,CAAC,OAAO/E,GAAG,CAACY,MAAX,KAAsB,WAAvB,CAAN;mDACOZ,GAAG,CAACY,MAhUf;;;;;;;;;;;;;;;;;;;;;;;;;;kDAwUIuF,cAxUJ;;;;;;;uBA0U4B,KAAK5C,WAAL,CAAiB,iBAAjB,EAAoC,oBACtD4C,cADsD,EAApC,CA1U5B;;;gBA0UUtB,SA1UV;gBA6UU7E,GA7UV,GA6UgBmD,wBAAwB,CAAC0B,SAAD,CA7UxC;;qBA8UQ7E,GAAG,CAACW,KA9UZ;;;;;sBA+UY,IAAIzJ,KAAJ,CAAU8I,GAAG,CAACW,KAAJ,CAAUmE,OAApB,CA/UZ;;;gBAiVIC,MAAM,CAAC,OAAO/E,GAAG,CAACY,MAAX,KAAsB,WAAvB,CAAN;gBACAmE,MAAM,CAAC/E,GAAG,CAACY,MAAL,CAAN;mDACOZ,GAAG,CAACY,MAnVf;;;;;;;;;;;;;;;;;;;;;;gCAyVc;WACLwF,sBAAL,GAA8B,IAA9B;;WACKC,oBAAL;;;;;;;;+BAMSjG,GAjWb,EAiWyB;MACrB6E,OAAO,CAACC,GAAR,CAAY,WAAZ,EAAyB9E,GAAG,CAAC0E,OAA7B;;;;;;;;+BAMSwB,IAxWb,EAwW2BxB,OAxW3B,EAwW4C;;UAEpCwB,IAAI,KAAK,IAAb,EAAmB;QACjBrB,OAAO,CAACC,GAAR,CAAY,WAAZ,EAAyBoB,IAAzB,EAA+BxB,OAA/B;;;WAEGsB,sBAAL,GAA8B,KAA9B;;;;;;;;;;;;;;;;;;gBAOMG,WApXV,GAoXwBlM,MAAM,CAACW,IAAP,CAAY,KAAKwL,2BAAjB,EAA8CvL,GAA9C,CAClB+I,MADkB,CApXxB;gBAuXUyC,WAvXV,GAuXwBpM,MAAM,CAACW,IAAP,CAClB,KAAK0L,kCADa,EAElBzL,GAFkB,CAEd+I,MAFc,CAvXxB;;sBA0XQuC,WAAW,CAAC7O,MAAZ,KAAuB,CAAvB,IAA4B+O,WAAW,CAAC/O,MAAZ,KAAuB,CA1X3D;;;;;qBA2XWuM,aAAL,CAAmB0C,KAAnB;;;;;oBAIG,KAAKP,sBA/Xd;;;;;;;;;;iCAgYqBG,WAAf,uHAA4B;kBAAnB7F,EAAmB;uBACrB8F,2BAAL,CAAiC9F,EAAjC,EAAqCkG,cAArC,GAAsD,IAAtD;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;kCAEaH,WAAf,2HAA4B;kBAAnB/F,GAAmB;uBACrBgG,kCAAL,CAAwChG,GAAxC,EAA4CkG,cAA5C,GAA6D,IAA7D;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;qBAEG3C,aAAL,CAAmB4C,OAAnB;;;;;;;;;6BAIaN,WA1YnB;;;;;;;;gBA0Ya7F,IA1Yb;wCA2Y0C,KAAK8F,2BAAL,CAAiC9F,IAAjC,CA3Y1C,EA2YakG,cA3Yb,yBA2YaA,cA3Yb,EA2Y6BzP,SA3Y7B,yBA2Y6BA,SA3Y7B;;sBA4YUyP,cAAc,KAAK,IA5Y7B;;;;;;;uBAgZmC,KAAK3C,aAAL,CAAmB6C,IAAnB,CAAwB,kBAAxB,EAA4C,CACnE3P,SADmE,CAA5C,CAhZnC;;;qBA8YeqP,2BAAL,CACE9F,IADF,EAEEkG,cAhZZ;;;;;;;gBAoZU3B,OAAO,CAACC,GAAR,sCACgC/N,SADhC,eAC8C,cAAI2N,OADlD;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;6BAMS2B,WA1ZnB;;;;;;;;gBA0Za/F,IA1Zb;wCA8ZU,KAAKgG,kCAAL,CAAwChG,IAAxC,CA9ZV,EA4ZQkG,cA5ZR,yBA4ZQA,cA5ZR,EA6ZQ/K,SA7ZR,yBA6ZQA,SA7ZR;;sBA+ZU+K,cAAc,KAAK,IA/Z7B;;;;;;;uBAmamC,KAAK3C,aAAL,CAAmB6C,IAAnB,CAAwB,kBAAxB,EAA4C,CACnEjL,SADmE,CAA5C,CAnanC;;;qBAiae6K,kCAAL,CACEhG,IADF,EAEEkG,cAnaZ;;;;;;;gBAuaU3B,OAAO,CAACC,GAAR,sCACgCrJ,SADhC,eAC8C,cAAIiJ,OADlD;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;6CAWiBiC,YAlb3B,EAkbiD;UACvC/G,GAAG,GAAGsB,yBAAyB,CAACyF,YAAD,CAArC;;UACI/G,GAAG,CAACW,KAAR,EAAe;cACP,IAAIzJ,KAAJ,CAAU8I,GAAG,CAACW,KAAJ,CAAUmE,OAApB,CAAN;;;UAGI9J,IAAI,GAAGX,MAAM,CAACW,IAAP,CAAY,KAAKwL,2BAAjB,EAA8CvL,GAA9C,CAAkD+I,MAAlD,CAAb;;;;;;8BACehJ,IAAf,mIAAqB;cAAZ0F,EAAY;cACbsG,GAAG,GAAG,KAAKR,2BAAL,CAAiC9F,EAAjC,CAAZ;;cACIsG,GAAG,CAACJ,cAAJ,KAAuB5G,GAAG,CAACuB,YAA/B,EAA6C;gBACpCX,MADoC,GAC1BZ,GAD0B,CACpCY,MADoC;YAE3CmE,MAAM,CAAC,OAAOnE,MAAP,KAAkB,WAAnB,CAAN;YAEAoG,GAAG,CAACtH,QAAJ,CAAa;cACXwB,UAAU,EAAEN,MAAM,CAACM,UADR;cAEXC,KAAK,EAAE,IAAI1K,SAAJ,CAAcmK,MAAM,CAACO,KAArB,CAFI;cAGXC,QAAQ,EAAER,MAAM,CAACQ,QAHN;cAIXhI,IAAI,EAAE3B,MAAM,CAAC+B,IAAP,CAAYoH,MAAM,CAACxH,IAAnB;aAJR;mBAMO,IAAP;;;;;;;;;;;;;;;;;;;;;;;;;;;;oCAaJjC,SAldJ,EAmdIuI,QAndJ,EAodY;UACFgB,EAAE,GAAG,EAAE,KAAKuG,iCAAlB;WACKT,2BAAL,CAAiC9F,EAAjC,IAAuC;QACrCvJ,SAAS,EAAEA,SAAS,CAACW,QAAV,EAD0B;QAErC4H,QAAQ,EAARA,QAFqC;QAGrCkH,cAAc,EAAE;OAHlB;;WAKKP,oBAAL;;aACO3F,EAAP;;;;;;;;;;;;;kDAQgCA,EApepC;;;;;;qBAqeQ,KAAK8F,2BAAL,CAAiC9F,EAAjC,CAreR;;;;;gBAseakG,cAteb,GAse+B,KAAKJ,2BAAL,CAAiC9F,EAAjC,CAte/B,CAseakG,cAteb;uBAuea,KAAKJ,2BAAL,CAAiC9F,EAAjC,CAAP;;sBACIkG,cAAc,KAAK,IAxe7B;;;;;;;uBA0egB,KAAK3C,aAAL,CAAmB6C,IAAnB,CAAwB,oBAAxB,EAA8C,CAACF,cAAD,CAA9C,CA1ehB;;;;;;;;;gBA4eU3B,OAAO,CAACC,GAAR,CAAY,2BAAZ,EAAyC,cAAIJ,OAA7C;;;qBAGCuB,oBAAL;;;;;;sBAEM,IAAInP,KAAJ,sCAAwCwJ,EAAxC,EAjfZ;;;;;;;;;;;;;;;;;;;;;;oDAwfkCqG,YAxflC,EAwfwD;UAC9C/G,GAAG,GAAGyB,gCAAgC,CAACsF,YAAD,CAA5C;;UACI/G,GAAG,CAACW,KAAR,EAAe;cACP,IAAIzJ,KAAJ,CAAU8I,GAAG,CAACW,KAAJ,CAAUmE,OAApB,CAAN;;;UAGI9J,IAAI,GAAGX,MAAM,CAACW,IAAP,CAAY,KAAK0L,kCAAjB,EAAqDzL,GAArD,CACX+I,MADW,CAAb;;;;;;8BAGehJ,IAAf,mIAAqB;cAAZ0F,EAAY;cACbsG,GAAG,GAAG,KAAKN,kCAAL,CAAwChG,EAAxC,CAAZ;;cACIsG,GAAG,CAACJ,cAAJ,KAAuB5G,GAAG,CAACuB,YAA/B,EAA6C;gBACpCX,MADoC,GAC1BZ,GAD0B,CACpCY,MADoC;YAE3CmE,MAAM,CAAC,OAAOnE,MAAP,KAAkB,WAAnB,CAAN;YAEAoG,GAAG,CAACtH,QAAJ,CAAa;cACXwH,SAAS,EAAEtG,MAAM,CAAC,CAAD,CADN;cAEXuG,WAAW,EAAE;gBACXjG,UAAU,EAAEN,MAAM,CAAC,CAAD,CAAN,CAAUM,UADX;gBAEXC,KAAK,EAAE,IAAI1K,SAAJ,CAAcmK,MAAM,CAAC,CAAD,CAAN,CAAUO,KAAxB,CAFI;gBAGXC,QAAQ,EAAER,MAAM,CAAC,CAAD,CAAN,CAAUQ,QAHT;gBAIXhI,IAAI,EAAE3B,MAAM,CAAC+B,IAAP,CAAYoH,MAAM,CAAC,CAAD,CAAN,CAAUxH,IAAtB;;aANV;mBASO,IAAP;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2CAcJyC,SA9hBJ,EA+hBI6D,QA/hBJ,EAgiBY;UACFgB,EAAE,GAAG,EAAE,KAAK0G,wCAAlB;WACKV,kCAAL,CAAwChG,EAAxC,IAA8C;QAC5C7E,SAAS,EAAEA,SAAS,CAAC/D,QAAV,EADiC;QAE5C4H,QAAQ,EAARA,QAF4C;QAG5CkH,cAAc,EAAE;OAHlB;;WAKKP,oBAAL;;aACO3F,EAAP;;;;;;;;;;;;;kDAQuCA,EAhjB3C;;;;;;qBAijBQ,KAAKgG,kCAAL,CAAwChG,EAAxC,CAjjBR;;;;;gBAkjBakG,cAljBb,GAkjB+B,KAAKF,kCAAL,CAAwChG,EAAxC,CAljB/B,CAkjBakG,cAljBb;uBAmjBa,KAAKF,kCAAL,CAAwChG,EAAxC,CAAP;;sBACIkG,cAAc,KAAK,IApjB7B;;;;;;;uBAsjBgB,KAAK3C,aAAL,CAAmB6C,IAAnB,CAAwB,oBAAxB,EAA8C,CAACF,cAAD,CAA9C,CAtjBhB;;;;;;;;;gBAwjBU3B,OAAO,CAACC,GAAR,CAAY,2BAAZ,EAAyC,cAAIJ,OAA7C;;;qBAGCuB,oBAAL;;;;;;sBAEM,IAAInP,KAAJ,sCAAwCwJ,EAAxC,EA7jBZ;;;;;;;;;;;;;;;;;;;;AAikBA1I,MAAM,CAACoL,UAAP,GAAoBA,UAApB;;ACn4BA;;;;AAGA,SAAsBiE,yBAAtB;;;;;;;2BAAO,iBACLC,UADK,EAELtK,WAFK;;;;;;;;;;;;;;;;YAKDuK,WALC,GAKa,EALb;;sCAGF9B,OAHE;cAGFA,OAHE;;;;YAQG+B,KARH,GAQW9B,IAAI,CAACK,GAAL,EARX;;mBASeuB,UAAU,CAACG,eAAX,OAAAH,UAAU,GAAiBtK,WAAjB,SAAiCyI,OAAjC,EATzB;;;YASHhL,SATG;;YAYCiN,MAZD,GAYU,IAZV;YAaCC,aAbD,GAaiB,CAbjB;;;;mBAecL,UAAU,CAACM,kBAAX,CAA8BnN,SAA9B,CAfd;;;YAeDiN,MAfC;;iBAgBGA,MAhBH;;;;;;;;kBAoBG,EAAEC,aAAF,IAAmB,CApBtB;;;;;;;;;mBAwBK3I,KAAK,CAAE,MAAMvG,sBAAP,GAAiCD,oBAAlC,CAxBV;;;;;;;kBA2BCkP,MAAM,IAAI,QAAQA,MA3BnB;;;;;;;;kBA8BC,EAAEH,WAAF,IAAiB,CA9BlB;;;;;YA+BKM,QA/BL,GA+BgB,CAACnC,IAAI,CAACK,GAAL,KAAayB,KAAd,IAAuB,IA/BvC;kBAgCK,IAAItQ,KAAJ,wBACYuD,SADZ,oCAC+CoN,QAAQ,CAACC,OAAT,CACjD,CADiD,CAD/C,uBAGUC,IAAI,CAACC,SAAL,CAAeN,MAAf,CAHV,OAhCL;;;kBAuCCA,MAAM,IAAIA,MAAM,CAACjF,GAAjB,IAAwB,EAAE,kBAAkBiF,MAAM,CAACjF,GAA3B,CAvCzB;;;;;kBAwCK,IAAIvL,KAAJ,uBACWuD,SADX,sBACgCsN,IAAI,CAACC,SAAL,CAAeN,MAAf,CADhC,OAxCL;;;;mBA8CG1I,KAAK,CAACiJ,IAAI,CAACC,MAAL,KAAgB,GAAjB,CA9CR;;;;;;;YAiDL3L,MAAS,CAAC9B,SAAS,KAAK2K,SAAf,CAAT;6CACO3K,SAlDF;;;;;;;;;;;;ACNP;;;;AAGA,IAAa0N,aAAb;;AAAA;;;;;;;;;;;kCAcI3O,IAdJ,EAeI4O,UAfJ,EAgBIhH,QAhBJ,EAiBIiH,KAjBJ,EAkBIxM,SAlBJ,EAmBiB;UACPyM,UAAU,GAAG3P,mBAAA,CAAoB,CACrCA,gBAAA,CAAiB,aAAjB,CADqC,EAErCA,iBAAA,CAAkB,UAAlB,CAFqC,EAGrCA,iBAAA,CAAkB,OAAlB,CAHqC,EAIrCoE,SAAA,CAAiB,WAAjB,CAJqC,CAApB,CAAnB;UAOM3D,IAAI,GAAG3B,MAAM,CAACG,KAAP,CAAa0Q,UAAU,CAACC,IAAxB,CAAb;MACAD,UAAU,CAACjR,MAAX,CACE;QACEiE,WAAW,EAAE,CADf;;QAEE8F,QAAQ,EAARA,QAFF;QAGEiH,KAAK,EAALA,KAHF;QAIExM,SAAS,EAAEA,SAAS,CAACvE,QAAV;OALf,EAOE8B,IAPF;aAUO,IAAImB,WAAJ,GAAkBiO,GAAlB,CAAsB;QAC3BxN,IAAI,EAAE,CACJ;UAACS,MAAM,EAAEjC,IAAT;UAAemC,QAAQ,EAAE,IAAzB;UAA+BC,WAAW,EAAE;SADxC,EAEJ;UAACH,MAAM,EAAE2M,UAAT;UAAqBzM,QAAQ,EAAE,KAA/B;UAAsCC,WAAW,EAAE;SAF/C,CADqB;QAK3BC,SAAS,EAAEsM,aAAa,CAACtM,SALE;QAM3BzC,IAAI,EAAJA;OANK,CAAP;;;;;;;;6BAacI,IAnDlB,EAmDmC+L,EAnDnC,EAmDkDC,MAnDlD,EAmD+E;UACrE8C,UAAU,GAAG3P,mBAAA,CAAoB,CACrCA,gBAAA,CAAiB,aAAjB,CADqC,EAErCA,iBAAA,CAAkB,QAAlB,CAFqC,CAApB,CAAnB;UAKMS,IAAI,GAAG3B,MAAM,CAACG,KAAP,CAAa0Q,UAAU,CAACC,IAAxB,CAAb;MACAD,UAAU,CAACjR,MAAX,CACE;QACEiE,WAAW,EAAE,CADf;;QAEEkK,MAAM,EAANA;OAHJ,EAKEpM,IALF;aAQO,IAAImB,WAAJ,GAAkBiO,GAAlB,CAAsB;QAC3BxN,IAAI,EAAE,CACJ;UAACS,MAAM,EAAEjC,IAAT;UAAemC,QAAQ,EAAE,IAAzB;UAA+BC,WAAW,EAAE;SADxC,EAEJ;UAACH,MAAM,EAAE8J,EAAT;UAAa5J,QAAQ,EAAE,KAAvB;UAA8BC,WAAW,EAAE;SAFvC,CADqB;QAK3BC,SAAS,EAAEsM,aAAa,CAACtM,SALE;QAM3BzC,IAAI,EAAJA;OANK,CAAP;;;;;;;;2BAaYI,IA/EhB,EA+EiCqC,SA/EjC,EA+EoE;UAC1DyM,UAAU,GAAG3P,mBAAA,CAAoB,CACrCA,gBAAA,CAAiB,aAAjB,CADqC,EAErCoE,SAAA,CAAiB,WAAjB,CAFqC,CAApB,CAAnB;UAKM3D,IAAI,GAAG3B,MAAM,CAACG,KAAP,CAAa0Q,UAAU,CAACC,IAAxB,CAAb;MACAD,UAAU,CAACjR,MAAX,CACE;QACEiE,WAAW,EAAE,CADf;;QAEEO,SAAS,EAAEA,SAAS,CAACvE,QAAV;OAHf,EAKE8B,IALF;aAQO,IAAImB,WAAJ,GAAkBiO,GAAlB,CAAsB;QAC3BxN,IAAI,EAAE,CAAC;UAACS,MAAM,EAAEjC,IAAT;UAAemC,QAAQ,EAAE,IAAzB;UAA+BC,WAAW,EAAE;SAA7C,CADqB;QAE3BC,SAAS,EAAEsM,aAAa,CAACtM,SAFE;QAG3BzC,IAAI,EAAJA;OAHK,CAAP;;;;;;;;wBA1FgC;aACzB,IAAI3C,SAAJ,CACL,mEADK,CAAP;;;;;;;ACHJ;;;;AAGA,IAAagS,MAAb;;AAAA;;;;;;;;;;;;;;;;;;;;gDAuBInB,UAvBJ,EAwBIoB,KAxBJ,EAyBIC,OAzBJ,EA0BI9M,SA1BJ,EA2BIzC,IA3BJ;;;;;;;gBA8BY4D,WA9BZ,GA8B0BmL,aAAa,CAACS,aAAd,CAClBF,KAAK,CAACvR,SADY,EAElBwR,OAAO,CAACxR,SAFU,EAGlB,CAHkB,EAIlBiC,IAAI,CAAC1B,MAJa,EAKlBmE,SALkB,CA9B1B;;uBAqCYwL,yBAAyB,CAACC,UAAD,EAAatK,WAAb,EAA0B0L,KAA1B,CArCrC;;;gBAwCUJ,UAxCV,GAwCuB3P,mBAAA,CAAoB,CACrCA,gBAAA,CAAiB,aAAjB,CADqC,EAErCA,gBAAA,CAAiB,QAAjB,CAFqC,EAGrCA,gBAAA,CAAiB,aAAjB,CAHqC,EAIrCA,gBAAA,CAAiB,oBAAjB,CAJqC,EAKrCA,gBAAA,CACEA,eAAA,CAAgB,MAAhB,CADF,EAEEA,mBAAA,CAAoBA,gBAAA,EAApB,EAAwC,CAAC,CAAzC,CAFF,EAGE,OAHF,CALqC,CAApB,CAxCvB;gBAoDUkQ,SApDV,GAoDsBJ,MAAM,CAACI,SApD7B;gBAqDQ1P,MArDR,GAqDiB,CArDjB;gBAsDQ2P,KAtDR,GAsDgB1P,IAtDhB;gBAuDQ2P,YAvDR,GAuDuB,EAvDvB;;;sBAwDWD,KAAK,CAACpR,MAAN,GAAe,CAxD1B;;;;;gBAyDYgC,KAzDZ,GAyDoBoP,KAAK,CAACjM,KAAN,CAAY,CAAZ,EAAegM,SAAf,CAzDpB;gBA0DYzP,KA1DZ,GA0DmB3B,MAAM,CAACG,KAAP,CAAaiR,SAAS,GAAG,EAAzB,CA1DnB;gBA2DMP,UAAU,CAACjR,MAAX,CACE;kBACEiE,WAAW,EAAE,CADf;;kBAEEnC,MAAM,EAANA,MAFF;kBAGEO,KAAK,EAALA;iBAJJ,EAMEN,KANF;gBASM4D,YApEZ,GAoE0B,IAAIzC,WAAJ,GAAkBiO,GAAlB,CAAsB;kBACxCxN,IAAI,EAAE,CAAC;oBAACS,MAAM,EAAEkN,OAAO,CAACxR,SAAjB;oBAA4BwE,QAAQ,EAAE,IAAtC;oBAA4CC,WAAW,EAAE;mBAA1D,CADkC;kBAExCC,SAAS,EAATA,SAFwC;kBAGxCzC,IAAI,EAAJA;iBAHkB,CApE1B;gBAyEM2P,YAAY,CAAC9O,IAAb,CACEoN,yBAAyB,CAACC,UAAD,EAAatK,YAAb,EAA0B0L,KAA1B,EAAiCC,OAAjC,CAD3B,EAzEN;;;;uBA+EY3J,KAAK,CAAC,OAAOxG,oBAAR,CA/EjB;;;sBAqFUuQ,YAAY,CAACrR,MAAb,KAAwB,CArFlC;;;;;;uBAsFcwH,OAAO,CAAC8J,GAAR,CAAYD,YAAZ,CAtFd;;;gBAuFQA,YAAY,GAAG,EAAf;;;gBAGF5P,MAAM,IAAI0P,SAAV;gBACAC,KAAK,GAAGA,KAAK,CAACjM,KAAN,CAAYgM,SAAZ,CAAR;;;;;;uBAEI3J,OAAO,CAAC8J,GAAR,CAAYD,YAAZ,CA7FV;;;gBAiGYT,WAjGZ,GAiGyB3P,mBAAA,CAAoB,CAACA,gBAAA,CAAiB,aAAjB,CAAD,CAApB,CAjGzB;gBAmGYS,MAnGZ,GAmGmB3B,MAAM,CAACG,KAAP,CAAa0Q,WAAU,CAACC,IAAxB,CAnGnB;;gBAoGMD,WAAU,CAACjR,MAAX,CACE;kBACEiE,WAAW,EAAE,CADf;;iBADF,EAIElC,MAJF;;gBAOM4D,aA3GZ,GA2G0B,IAAIzC,WAAJ,GAAkBiO,GAAlB,CAAsB;kBACxCxN,IAAI,EAAE,CAAC;oBAACS,MAAM,EAAEkN,OAAO,CAACxR,SAAjB;oBAA4BwE,QAAQ,EAAE,IAAtC;oBAA4CC,WAAW,EAAE;mBAA1D,CADkC;kBAExCC,SAAS,EAATA,SAFwC;kBAGxCzC,IAAI,EAAJA;iBAHkB,CA3G1B;;uBAgHYiO,yBAAyB,CAACC,UAAD,EAAatK,aAAb,EAA0B0L,KAA1B,EAAiCC,OAAjC,CAhHrC;;;iDAkHWA,OAAO,CAACxR,SAlHnB;;;;;;;;;;;;;;;;;;;;;;wBAIiC;;;;;;aAMtB+C,gBAAgB,GAAG,GAA1B;;;;;;;ACnBJ;;;AAGA,IAAa+O,SAAb;;AAAA;;;;;;;;;;;;;;;yBAgBI3B,UAhBJ,EAiBIoB,KAjBJ,EAkBIQ,GAlBJ,EAmBwB;UACdP,OAAO,GAAG,IAAI1Q,OAAJ,EAAhB;aACOwQ,MAAM,CAACU,IAAP,CAAY7B,UAAZ,EAAwBoB,KAAxB,EAA+BC,OAA/B,EAAwCM,SAAS,CAACpN,SAAlD,EAA6DqN,GAA7D,CAAP;;;;;;;;wBAjBgC;aACzB,IAAIzS,SAAJ,CAAc,6CAAd,CAAP;;;;;;;ACPJ;;;;;;;;;;;;AAkDA,SAAS2S,gBAAT,CAA0BC,OAA1B,EAAoD;MAC5CC,MAAM,GAAGD,OAAO,CAAC9D,EAAR,CAAWjO,QAAX,EAAf;MACM8B,IAAI,GAAG3B,MAAM,CAACG,KAAP,CAAa,IAAI0R,MAAM,CAAC5R,MAAxB,CAAb;EACA0B,IAAI,CAACmQ,aAAL,CAAmBF,OAAO,CAAC7D,MAA3B,EAAmC,CAAnC;EACA8D,MAAM,CAACzR,IAAP,CAAYuB,IAAZ,EAAkB,CAAlB;SACOA,IAAP;;;;;;;AAMF,SAASoQ,aAAT,CAAuBC,IAAvB,EAA2C;MACnCrQ,IAAI,GAAG3B,MAAM,CAACG,KAAP,CAAa,IAAI,EAAjB,CAAb;EACAwB,IAAI,CAACmQ,aAAL,CAAmB,EAAnB,EAAuB,CAAvB,EAFyC;;WAIhCG,GAAT,CAAaC,IAAb,EAAmB;aACRC,GAAT,CAAaC,MAAb,EAAqB;UACfA,MAAM,GAAG,EAAb,EAAiB;eACR,MAAMA,MAAb;;;aAEKA,MAAP;;;WAIAF,IAAI,CAACG,cAAL,KACA,GADA,GAEAF,GAAG,CAACD,IAAI,CAACI,WAAL,KAAqB,CAAtB,CAFH,GAGA,GAHA,GAIAH,GAAG,CAACD,IAAI,CAACK,UAAL,EAAD,CAJH,GAKA,GALA,GAMAJ,GAAG,CAACD,IAAI,CAACM,WAAL,EAAD,CANH,GAOA,GAPA,GAQAL,GAAG,CAACD,IAAI,CAACO,aAAL,EAAD,CARH,GASA,GATA,GAUAN,GAAG,CAACD,IAAI,CAACQ,aAAL,EAAD,CAVH,GAWA,GAZF;;;EAeF/Q,IAAI,CAACgR,KAAL,CAAWV,GAAG,CAACD,IAAD,CAAd,EAAsB,CAAtB;SACOrQ,IAAP;;;;;;;AAMF,SAASiR,kBAAT,CAA4BC,SAA5B,EAAwD;UAC9CA,SAAS,CAACC,IAAlB;SACO,WAAL;;YACQZ,IAAI,GAAGH,aAAa,CAACc,SAAS,CAACb,IAAX,CAA1B;YACMjQ,IAAI,GAAG8Q,SAAS,CAAC9Q,IAAV,CAAelC,QAAf,EAAb;YAEM8B,IAAI,GAAG3B,MAAM,CAACG,KAAP,CAAa,IAAI+R,IAAI,CAACjS,MAAT,GAAkB8B,IAAI,CAAC9B,MAApC,CAAb;QACA0B,IAAI,CAACmQ,aAAL,CAAmB,CAAnB,EAAsB,CAAtB,EALgB;;QAMhBI,IAAI,CAAC9R,IAAL,CAAUuB,IAAV,EAAgB,CAAhB;QACAI,IAAI,CAAC3B,IAAL,CAAUuB,IAAV,EAAgB,IAAIuQ,IAAI,CAACjS,MAAzB;eACO0B,IAAP;;;SAEG,WAAL;;YACQI,KAAI,GAAG8Q,SAAS,CAAC9Q,IAAV,CAAelC,QAAf,EAAb;;YACM8B,KAAI,GAAG3B,MAAM,CAACG,KAAP,CAAa,IAAI4B,KAAI,CAAC9B,MAAtB,CAAb;;QACA0B,KAAI,CAACmQ,aAAL,CAAmB,CAAnB,EAAsB,CAAtB,EAHgB;;;QAIhB/P,KAAI,CAAC3B,IAAL,CAAUuB,KAAV,EAAgB,CAAhB;;eACOA,KAAP;;;;YAGM,IAAIlC,KAAJ,mCAAqCoT,SAAS,CAACC,IAA/C,EAAN;;;;;;;;AAON,IAAaC,aAAb;;AAAA;;;;;;;;;;;uCAkB4BhR,IAlB5B,EAkB6CiQ,IAlB7C,EAkB6E;aAClE;QACLc,IAAI,EAAE,WADD;QAEL/Q,IAAI,EAAJA,IAFK;QAGLiQ,IAAI,EAAJA;OAHF;;;;;;;;uCAUwBjQ,IA7B5B,EA6BiE;aACtD;QACL+Q,IAAI,EAAE,WADD;QAEL/Q,IAAI,EAAJA;OAFF;;;;;;;;wBAUAA,IAxCJ,EAyCImP,OAzCJ,EA0CIpD,EA1CJ,EA2CIC,MA3CJ,EA6CiB;UACPpM,IAAI,GAAG3B,MAAM,CAACG,KAAP,CAAa,IAAb,CAAb;UACI6S,GAAG,GAAG,CAAV;MACArR,IAAI,CAACmQ,aAAL,CAAmB,CAAnB,EAAsBkB,GAAtB,EAHa;;MAIbA,GAAG,IAAI,CAAP;;wCALGC,UACU;QADVA,UACU;;;cAMLA,UAAU,CAAChT,MAAnB;aACO,CAAL;;YACE0B,IAAI,CAACmQ,aAAL,CAAmB,CAAnB,EAAsBkB,GAAtB,EADM;;YAENA,GAAG,IAAI,CAAP;;kBAGQpB,OAAO,GAAGD,gBAAgB,CAAC;gBAAC5D,MAAM,EAANA,MAAD;gBAASD,EAAE,EAAFA;eAAV,CAAhC;cACA8D,OAAO,CAACxR,IAAR,CAAauB,IAAb,EAAmBqR,GAAnB;cACAA,GAAG,IAAIpB,OAAO,CAAC3R,MAAf;;gBAEIiT,WAAW,GAAGvR,IAAI,CAACyD,KAAL,CAAW,CAAX,EAAc4N,GAAd,CAApB;gBAEMzN,WAAW,GAAGmL,aAAa,CAACS,aAAd,CAClBpP,IADkB,EAElBmP,OAFkB,EAGlBnD,MAHkB,EAIlBmF,WAAW,CAACjT,MAJM,EAKlB,KAAKmE,SALa,CAApB;mBAQOmB,WAAW,CAACwL,GAAZ,CAAgB;cACrBxN,IAAI,EAAE,CACJ;gBAACS,MAAM,EAAE8J,EAAT;gBAAa5J,QAAQ,EAAE,KAAvB;gBAA8BC,WAAW,EAAE;eADvC,EAEJ;gBAACH,MAAM,EAAEkN,OAAT;gBAAkBhN,QAAQ,EAAE,KAA5B;gBAAmCC,WAAW,EAAE;eAF5C,CADe;cAKrBC,SAAS,EAAE,KAAKA,SALK;cAMrBzC,IAAI,EAAEuR;aAND,CAAP;;;aASG,CAAL;;YACEvR,IAAI,CAACmQ,aAAL,CAAmB,CAAnB,EAAsBkB,GAAtB,EADM;;YAENA,GAAG,IAAI,CAAP;;kBAEQH,SAAS,GAAGI,UAAU,CAAC,CAAD,CAA5B;kBAEME,aAAa,GAAGP,kBAAkB,CAACC,SAAD,CAAxC;cACAM,aAAa,CAAC/S,IAAd,CAAmBuB,IAAnB,EAAyBqR,GAAzB;cACAA,GAAG,IAAIG,aAAa,CAAClT,MAArB;cAEA0B,IAAI,CAACmQ,aAAL,CAAmB,CAAnB,EAAsBkB,GAAtB,EAPF;;cAQEA,GAAG,IAAI,CAAP;kBAEMI,WAAW,GAAGzB,gBAAgB,CAAC;gBAAC5D,MAAM,EAANA,MAAD;gBAASD,EAAE,EAAFA;eAAV,CAApC;cACAsF,WAAW,CAAChT,IAAZ,CAAiBuB,IAAjB,EAAuBqR,GAAvB;cACAA,GAAG,IAAII,WAAW,CAACnT,MAAnB;;;gBAEIiT,YAAW,GAAGvR,IAAI,CAACyD,KAAL,CAAW,CAAX,EAAc4N,GAAd,CAApB;;gBAEMzN,YAAW,GAAGmL,aAAa,CAACS,aAAd,CAClBpP,IADkB,EAElBmP,OAFkB,EAGlBnD,MAHkB,EAIlBmF,YAAW,CAACjT,MAJM,EAKlB,KAAKmE,SALa,CAApB;;mBAQOmB,YAAW,CAACwL,GAAZ,CAAgB;cACrBxN,IAAI,EAAE,CAAC;gBAACS,MAAM,EAAEkN,OAAT;gBAAkBhN,QAAQ,EAAE,KAA5B;gBAAmCC,WAAW,EAAE;eAAjD,CADe;cAErBC,SAAS,EAAE,KAAKA,SAFK;cAGrBzC,IAAI,EAAEuR;aAHD,CAAP;;;aAOG,CAAL;;YACEvR,IAAI,CAACmQ,aAAL,CAAmB,CAAnB,EAAsBkB,GAAtB,EADM;;YAENA,GAAG,IAAI,CAAP;;2CAEsBC,UAAtB,iCAAkC;kBAAzBJ,UAAS,kBAAb;;kBACGM,cAAa,GAAGP,kBAAkB,CAACC,UAAD,CAAxC;;cACAM,cAAa,CAAC/S,IAAd,CAAmBuB,IAAnB,EAAyBqR,GAAzB;;cACAA,GAAG,IAAIG,cAAa,CAAClT,MAArB;cAEA0B,IAAI,CAACmQ,aAAL,CAAmB,CAAnB,EAAsBkB,GAAtB,EALgC;;cAMhCA,GAAG,IAAI,CAAP;;kBAEMI,YAAW,GAAGzB,gBAAgB,CAAC;gBAAC5D,MAAM,EAANA,MAAD;gBAASD,EAAE,EAAFA;eAAV,CAApC;;cACAsF,YAAW,CAAChT,IAAZ,CAAiBuB,IAAjB,EAAuBqR,GAAvB;;cACAA,GAAG,IAAII,YAAW,CAACnT,MAAnB;;;gBAEIiT,aAAW,GAAGvR,IAAI,CAACyD,KAAL,CAAW,CAAX,EAAc4N,GAAd,CAApB;;gBAEMzN,aAAW,GAAGmL,aAAa,CAACS,aAAd,CAClBpP,IADkB,EAElBmP,OAFkB,EAGlBnD,MAHkB,EAIlBmF,aAAW,CAACjT,MAJM,EAKlB,KAAKmE,SALa,CAApB;;mBAQOmB,aAAW,CAACwL,GAAZ,CAAgB;cACrBxN,IAAI,EAAE,CAAC;gBAACS,MAAM,EAAEkN,OAAT;gBAAkBhN,QAAQ,EAAE,KAA5B;gBAAmCC,WAAW,EAAE;eAAjD,CADe;cAErBC,SAAS,EAAE,KAAKA,SAFK;cAGrBzC,IAAI,EAAEuR;aAHD,CAAP;;;;gBAQM,IAAIzT,KAAJ,oDAEFwT,UAAU,CAAChT,MAFT,eAAN;;;;;;;;;8BAYJ8B,IAhKJ,EAiKImP,OAjKJ,EAkKIpD,EAlKJ,EAmKIC,MAnKJ,EAoKIsF,UApKJ,EAqKIC,UArKJ,EAsKiB;UACP3R,IAAI,GAAG3B,MAAM,CAACG,KAAP,CAAa,IAAb,CAAb;UACI6S,GAAG,GAAG,CAAV;MACArR,IAAI,CAACmQ,aAAL,CAAmB,CAAnB,EAAsBkB,GAAtB,EAHa;;MAIbA,GAAG,IAAI,CAAP;MAEArR,IAAI,CAACmQ,aAAL,CAAmB,CAAnB,EAAsBkB,GAAtB,EANa;;MAObA,GAAG,IAAI,CAAP;;+BAEsB,CAACK,UAAD,EAAaC,UAAb,CAAtB,4BAAgD;YAAvCT,SAAS,YAAb;YACGM,aAAa,GAAGP,kBAAkB,CAACC,SAAD,CAAxC;QACAM,aAAa,CAAC/S,IAAd,CAAmBuB,IAAnB,EAAyBqR,GAAzB;QACAA,GAAG,IAAIG,aAAa,CAAClT,MAArB;;;MAGF0B,IAAI,CAACmQ,aAAL,CAAmB,CAAnB,EAAsBkB,GAAtB,EAfa;;MAgBbA,GAAG,IAAI,CAAP;UAEMI,WAAW,GAAGzB,gBAAgB,CAAC;QAAC5D,MAAM,EAANA,MAAD;QAASD,EAAE,EAAFA;OAAV,CAApC;MACAsF,WAAW,CAAChT,IAAZ,CAAiBuB,IAAjB,EAAuBqR,GAAvB;MACAA,GAAG,IAAII,WAAW,CAACnT,MAAnB;UAEMiT,WAAW,GAAGvR,IAAI,CAACyD,KAAL,CAAW,CAAX,EAAc4N,GAAd,CAApB;UAEMzN,WAAW,GAAGmL,aAAa,CAACS,aAAd,CAClBpP,IADkB,EAElBmP,OAFkB,EAGlBnD,MAHkB,EAIlBmF,WAAW,CAACjT,MAJM,EAKlB,KAAKmE,SALa,CAApB;aAQOmB,WAAW,CAACwL,GAAZ,CAAgB;QACrBxN,IAAI,EAAE,CAAC;UAACS,MAAM,EAAEkN,OAAT;UAAkBhN,QAAQ,EAAE,KAA5B;UAAmCC,WAAW,EAAE;SAAjD,CADe;QAErBC,SAAS,EAAE,KAAKA,SAFK;QAGrBzC,IAAI,EAAEuR;OAHD,CAAP;;;;;;;;;mCAYAnR,IAlNJ,EAmNImP,OAnNJ,EAoNIpD,EApNJ,EAqNIkE,IArNJ,EAsNiB;UACPuB,QAAQ,GAAGxB,aAAa,CAACC,IAAD,CAA9B;UACMrQ,IAAI,GAAG3B,MAAM,CAACG,KAAP,CAAa,IAAIoT,QAAQ,CAACtT,MAA1B,CAAb;MAEA0B,IAAI,CAACmQ,aAAL,CAAmB,CAAnB,EAAsB,CAAtB,EAJa;;MAKbyB,QAAQ,CAACnT,IAAT,CAAcuB,IAAd,EAAoB,CAApB;aAEO,IAAImB,WAAJ,GAAkBiO,GAAlB,CAAsB;QAC3BxN,IAAI,EAAE,CACJ;UAACS,MAAM,EAAEjC,IAAT;UAAemC,QAAQ,EAAE,IAAzB;UAA+BC,WAAW,EAAE;SADxC,EAEJ;UAACH,MAAM,EAAEkN,OAAT;UAAkBhN,QAAQ,EAAE,KAA5B;UAAmCC,WAAW,EAAE;SAF5C,EAGJ;UAACH,MAAM,EAAE8J,EAAT;UAAa5J,QAAQ,EAAE,KAAvB;UAA8BC,WAAW,EAAE;SAHvC,CADqB;QAM3BC,SAAS,EAAE,KAAKA,SANW;QAO3BzC,IAAI,EAAJA;OAPK,CAAP;;;;;;;;;mCAgBAI,IA7OJ,EA8OImP,OA9OJ,EA+OIpD,EA/OJ,EAgPiB;UACP+C,UAAU,GAAG3P,mBAAA,CAAoB,CAACA,gBAAA,CAAiB,aAAjB,CAAD,CAApB,CAAnB;UAEMS,IAAI,GAAG3B,MAAM,CAACG,KAAP,CAAa0Q,UAAU,CAACC,IAAxB,CAAb;MACAD,UAAU,CAACjR,MAAX,CACE;QACEiE,WAAW,EAAE,CADf;;OADF,EAIElC,IAJF;aAOO,IAAImB,WAAJ,GAAkBiO,GAAlB,CAAsB;QAC3BxN,IAAI,EAAE,CACJ;UAACS,MAAM,EAAEjC,IAAT;UAAemC,QAAQ,EAAE,IAAzB;UAA+BC,WAAW,EAAE;SADxC,EAEJ;UAACH,MAAM,EAAEkN,OAAT;UAAkBhN,QAAQ,EAAE,KAA5B;UAAmCC,WAAW,EAAE;SAF5C,EAGJ;UAACH,MAAM,EAAE8J,EAAT;UAAa5J,QAAQ,EAAE,KAAvB;UAA8BC,WAAW,EAAE;SAHvC,CADqB;QAM3BC,SAAS,EAAE,KAAKA,SANW;QAO3BzC,IAAI,EAAJA;OAPK,CAAP;;;;;;;;wBAvPgC;aACzB,IAAI3C,SAAJ,CAAc,6CAAd,CAAP;;;;;;;;wBAMyB;aAClB,GAAP;;;;;;;ACvIJ;;;AAGA,IAAawU,YAAb;;AAAA;;;;;;;;;;;;;;;yBAgBI3D,UAhBJ,EAiBIoB,KAjBJ,EAkBIwC,WAlBJ,EAmBwB;UACdxR,KAAK,sBAAOjC,MAAM,CAAC+B,IAAP,CAAY0R,WAAZ,CAAP,CAAX;;UACMvC,OAAO,GAAG,IAAI1Q,OAAJ,EAAhB;aACOwQ,MAAM,CAACU,IAAP,CACL7B,UADK,EAELoB,KAFK,EAGLC,OAHK,EAILsC,YAAY,CAACpP,SAJR,EAKLnC,KALK,CAAP;;;;;;;;wBAlBgC;aACzB,IAAIjD,SAAJ,CAAc,6CAAd,CAAP;;;;;;;ACEJ;;;AAGA,IAAa0U,WAAb;;AAAA;;;;;;;;;;;;;;;+BAIqB;UACXC,CAAC,GAAG,yEAAgBC,OAAhB,EAAV;;UACM9T,CAAC,GAAGE,MAAM,CAAC+B,IAAP,CAAY4R,CAAZ,CAAV;;UACI7T,CAAC,CAACG,MAAF,KAAa,CAAjB,EAAoB;eACXH,CAAP;;;MAEFwN,MAAM,CAACxN,CAAC,CAACG,MAAF,GAAW,CAAZ,EAAe,uBAAf,CAAN;UAEMC,OAAO,GAAGF,MAAM,CAACG,KAAP,CAAa,CAAb,CAAhB;MACAL,CAAC,CAACM,IAAF,CAAOF,OAAP;aACOA,OAAP;;;;;;;;+BAMgBuB,MApBpB,EAoBiD;MAC7C6L,MAAM,CAAC7L,MAAM,CAACxB,MAAP,KAAkB,CAAnB,mCAAgDwB,MAAM,CAACxB,MAAvD,EAAN;aACO,IAAIb,EAAJ,CACL,mBAAIqC,MAAJ,EACGmS,OADH,GAEGpQ,GAFH,CAEO,UAAAkD,CAAC;eAAI,YAAKA,CAAC,CAAC7E,QAAF,CAAW,EAAX,CAAL,EAAsBuD,KAAtB,CAA4B,CAAC,CAA7B,CAAJ;OAFR,EAGGyO,IAHH,CAGQ,EAHR,CADK,EAKL,EALK,CAAP;;;;;EAtB6BzU,EAAjC;;;;;;;;AA4DA,IAAM0U,eAAe,GAAG5S,mBAAA,CAAoB,CAC1CoE,MAAA,CAAc,QAAd,CAD0C,EAE1CpE,eAAA,CAAgB,UAAhB,CAF0C,EAG1CoE,UAAA,CAAkB,MAAlB,CAH0C,EAI1CA,UAAA,CAAkB,QAAlB,CAJ0C,CAApB,CAAxB;;;;;;;;AA6CA,IAAMyO,sBAAsB,GAAG7S,mBAAA,CAAoB,CACjDoE,SAAA,CAAiB,OAAjB,CADiD,EAEjDA,SAAA,CAAiB,OAAjB,CAFiD,EAGjDA,MAAA,CAAc,QAAd,CAHiD,EAIjDpE,eAAA,CAAgB,cAAhB,CAJiD,EAKjDoE,SAAA,CAAiB,QAAjB,CALiD,EAMjDA,MAAA,CAAc,gBAAd,CANiD,CAApB,CAA/B;;;;;;AAcA,AAAO,IAAM0O,uBAAuB,GAAG,IAAIhV,SAAJ,CACrC,6CADqC,CAAhC;;;;;AAOP,IAAaiV,KAAb;;AAAA;;;;;;;;;;;;;;;;;;;;iBAwBIpE,UADF,EAEEqE,KAFF,EAIE;QADA9P,SACA,uEADuB4P,uBACvB;;;;;;;;;;IACApR,MAAM,CAACC,MAAP,CAAc,IAAd,EAAoB;MAACgN,UAAU,EAAVA,UAAD;MAAaqE,KAAK,EAALA,KAAb;MAAoB9P,SAAS,EAATA;KAAxC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;gDA4FAsF,KAxHJ;;;;;;;;;;;;gBAyHIyK,MAzHJ,2DAyH+B,IAzH/B;gBA2HUC,YA3HV,GA2HyB,IAAI5T,OAAJ,EA3HzB;gBA8HUqQ,UA9HV,GA8HuB3P,mBAAA,CAAoB,CAACA,gBAAA,CAAiB,aAAjB,CAAD,CAApB,CA9HvB;gBAgIUS,IAhIV,GAgIiB3B,MAAM,CAACG,KAAP,CAAa0Q,UAAU,CAACC,IAAxB,CAhIjB;gBAiIID,UAAU,CAACjR,MAAX,CACE;kBACEiE,WAAW,EAAE,CADf;;iBADF,EAIElC,IAJF,EAjIJ;;gBAyII4D,WAAW,GAAGmL,aAAa,CAACS,aAAd,CACZzH,KAAK,CAAChK,SADM,EAEZ0U,YAAY,CAAC1U,SAFD,EAGZ,CAHY,EAIZ,IAAIqU,sBAAsB,CAACjD,IAJf,EAKZ,KAAK1M,SALO,CAAd;;uBAOMwL,yBAAyB,CAAC,KAAKC,UAAN,EAAkBtK,WAAlB,EAA+BmE,KAA/B,CAhJnC;;;;gBAmJUnG,IAnJV,GAmJiB,CACX;kBAACS,MAAM,EAAEoQ,YAAY,CAAC1U,SAAtB;kBAAiCwE,QAAQ,EAAE,IAA3C;kBAAiDC,WAAW,EAAE;iBADnD,EAEX;kBAACH,MAAM,EAAE0F,KAAK,CAAChK,SAAf;kBAA0BwE,QAAQ,EAAE,KAApC;kBAA2CC,WAAW,EAAE;iBAF7C,EAGX;kBAACH,MAAM,EAAE,KAAKkQ,KAAd;kBAAqBhQ,QAAQ,EAAE,KAA/B;kBAAsCC,WAAW,EAAE;iBAHxC,CAnJjB;;oBAwJQgQ,MAAJ,EAAY;kBACV5Q,IAAI,CAACf,IAAL,CAAU;oBAACwB,MAAM,EAAEmQ,MAAT;oBAAiBjQ,QAAQ,EAAE,KAA3B;oBAAkCC,WAAW,EAAE;mBAAzD;;;gBAEFoB,WAAW,GAAG,IAAIzC,WAAJ,GAAkBiO,GAAlB,CAAsB;kBAClCxN,IAAI,EAAJA,IADkC;kBAElCa,SAAS,EAAE,KAAKA,SAFkB;kBAGlCzC,IAAI,EAAJA;iBAHY,CAAd;;uBAKMiO,yBAAyB,CAC7B,KAAKC,UADwB,EAE7BtK,WAF6B,EAG7BmE,KAH6B,EAI7B0K,YAJ6B,CAhKnC;;;iDAuKWA,YAAY,CAAC1U,SAvKxB;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;uBA8K8B,KAAKmQ,UAAL,CAAgBwE,cAAhB,CAA+B,KAAKH,KAApC,CA9K9B;;;gBA8KUxE,WA9KV;;oBA+KSA,WAAW,CAAChG,KAAZ,CAAkBvD,MAAlB,CAAyB,KAAK/B,SAA9B,CA/KT;;;;;sBAgLY,IAAI3E,KAAJ,gCACoB6Q,IAAI,CAACC,SAAL,CAAeb,WAAW,CAAChG,KAA3B,CADpB,EAhLZ;;;gBAqLU/H,IArLV,GAqLiB3B,MAAM,CAAC+B,IAAP,CAAY2N,WAAW,CAAC/N,IAAxB,CArLjB;;sBAuLQA,IAAI,CAAC2S,SAAL,CAAe,CAAf,MAAsB,CAvL9B;;;;;sBAwLY,IAAI7U,KAAJ,sBAxLZ;;;gBA0LU8U,SA1LV,GA0LsBT,eAAe,CAACvU,MAAhB,CAAuBoC,IAAvB,EAA6B,CAA7B,CA1LtB;gBA2LI4S,SAAS,CAACC,MAAV,GAAmBd,WAAW,CAACe,UAAZ,CAAuBF,SAAS,CAACC,MAAjC,CAAnB;kDACOD,SA5LX;;;;;;;;;;;;;;;;;;;;;;;;;;;iDAoMoBxN,OApMpB;;;;;;;uBAqM8B,KAAK8I,UAAL,CAAgBwE,cAAhB,CAA+BtN,OAA/B,CArM9B;;;gBAqMU2I,WArMV;;oBAsMSA,WAAW,CAAChG,KAAZ,CAAkBvD,MAAlB,CAAyB,KAAK/B,SAA9B,CAtMT;;;;;sBAuMY,IAAI3E,KAAJ,+BAvMZ;;;gBA0MUkC,IA1MV,GA0MiB3B,MAAM,CAAC+B,IAAP,CAAY2N,WAAW,CAAC/N,IAAxB,CA1MjB;;sBA2MQA,IAAI,CAAC2S,SAAL,CAAe,CAAf,MAAsB,CA3M9B;;;;;sBA4MY,IAAI7U,KAAJ,8BA5MZ;;;gBA8MUiV,gBA9MV,GA8M6BX,sBAAsB,CAACxU,MAAvB,CAA8BoC,IAA9B,EAAoC,CAApC,CA9M7B;gBAgNI+S,gBAAgB,CAACR,KAAjB,GAAyB,IAAIlV,SAAJ,CAAc0V,gBAAgB,CAACR,KAA/B,CAAzB;gBACAQ,gBAAgB,CAAChL,KAAjB,GAAyB,IAAI1K,SAAJ,CAAc0V,gBAAgB,CAAChL,KAA/B,CAAzB;gBACAgL,gBAAgB,CAAC3G,MAAjB,GAA0B2F,WAAW,CAACe,UAAZ,CAAuBC,gBAAgB,CAAC3G,MAAxC,CAA1B;;oBACI2G,gBAAgB,CAACC,YAAjB,KAAkC,CAAtC,EAAyC;kBACvCD,gBAAgB,CAACP,MAAjB,GAA0B,IAA1B;kBACAO,gBAAgB,CAACE,cAAjB,GAAkC,IAAIlB,WAAJ,EAAlC;iBAFF,MAGO;kBACLgB,gBAAgB,CAACP,MAAjB,GAA0B,IAAInV,SAAJ,CAAc0V,gBAAgB,CAACP,MAA/B,CAA1B;kBACAO,gBAAgB,CAACE,cAAjB,GAAkClB,WAAW,CAACe,UAAZ,CAChCC,gBAAgB,CAACE,cADe,CAAlC;;;oBAKGF,gBAAgB,CAACR,KAAjB,CAAuB/N,MAAvB,CAA8B,KAAK+N,KAAnC,CA7NT;;;;;sBA8NY,IAAIzU,KAAJ,wCAC4B6Q,IAAI,CAACC,SAAL,CAC9BmE,gBAAgB,CAACR,KADa,CAD5B,kBAGK5D,IAAI,CAACC,SAAL,CAAe,KAAK2D,KAApB,CAHL,EA9NZ;;;kDAoOWQ,gBApOX;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;iDAgPIhL,KAhPJ,EAiPIyK,MAjPJ,EAkPIU,WAlPJ,EAmPI9G,MAnPJ;;;;;+BAqPiB6B,yBArPjB;+BAsPM,KAAKC,UAtPX;+BAuPM,IAAI/M,WAAJ,EAvPN;;uBAwPc,KAAKgS,mBAAL,CACJpL,KAAK,CAAChK,SADF,EAEJyU,MAFI,EAGJU,WAHI,EAIJ9G,MAJI,CAxPd;;;;4CAuPwBgD,GAvPxB;+BA+PMrH,KA/PN;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;iDA4QIA,KA5QJ,EA6QI3C,OA7QJ,EA8QIgO,QA9QJ,EA+QIhH,MA/QJ;;;;;;uBAiRU6B,yBAAyB,CAC7B,KAAKC,UADwB,EAE7B,IAAI/M,WAAJ,GAAkBiO,GAAlB,CACE,KAAKiE,kBAAL,CAAwBtL,KAAK,CAAChK,SAA9B,EAAyCqH,OAAzC,EAAkDgO,QAAlD,EAA4DhH,MAA5D,CADF,CAF6B,EAK7BrE,KAL6B,CAjRnC;;;;;;;;;;;;;;;;;;;;;;;;;;2BAkSIA,KAlSJ,EAmSI3C,OAnSJ,EAoSIgO,QApSJ,EAqSmB;aACR,KAAKE,OAAL,CAAavL,KAAb,EAAoB3C,OAApB,EAA6BgO,QAA7B,EAAuC,CAAvC,CAAP;;;;;;;;;;;;;;;iDAWArL,KAjTJ,EAkTI3C,OAlTJ,EAmTImO,QAnTJ;;;;;;uBAqTUtF,yBAAyB,CAC7B,KAAKC,UADwB,EAE7B,IAAI/M,WAAJ,GAAkBiO,GAAlB,CACE,KAAKoE,mBAAL,CAAyBzL,KAAK,CAAChK,SAA/B,EAA0CqH,OAA1C,EAAmDmO,QAAnD,CADF,CAF6B,EAK7BxL,KAL6B,CArTnC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;iDAuUIA,KAvUJ,EAwUIyK,MAxUJ,EAyUIU,WAzUJ,EA0UI9G,MA1UJ;;;;;;;uBA4U8B,KAAK2B,WAAL,CAAiByE,MAAjB,CA5U9B;;;gBA4UUzE,WA5UV;;oBA6UShG,KAAK,CAACvD,MAAN,CAAauJ,WAAW,CAAChG,KAAzB,CA7UT;;;;;sBA8UY,IAAIjK,KAAJ,CAAU,wBAAV,CA9UZ;;;gBAiVUoR,UAjVV,GAiVuB3P,mBAAA,CAAoB,CACrCA,gBAAA,CAAiB,aAAjB,CADqC,EAErCoE,MAAA,CAAc,QAAd,CAFqC,CAApB,CAjVvB;gBAsVU3D,IAtVV,GAsViB3B,MAAM,CAACG,KAAP,CAAa0Q,UAAU,CAACC,IAAxB,CAtVjB;gBAuVID,UAAU,CAACjR,MAAX,CACE;kBACEiE,WAAW,EAAE,CADf;;kBAEEkK,MAAM,EAAE,IAAI2F,WAAJ,CAAgB3F,MAAhB,EAAwBlO,QAAxB;iBAHZ,EAKE8B,IALF;gBAQM4B,IA/VV,GA+ViB,CACX;kBAACS,MAAM,EAAE0F,KAAT;kBAAgBxF,QAAQ,EAAE,IAA1B;kBAAgCC,WAAW,EAAE;iBADlC,EAEX;kBAACH,MAAM,EAAEmQ,MAAT;kBAAiBjQ,QAAQ,EAAE,KAA3B;kBAAkCC,WAAW,EAAE;iBAFpC,EAGX;kBAACH,MAAM,EAAE6Q,WAAT;kBAAsB3Q,QAAQ,EAAE,KAAhC;kBAAuCC,WAAW,EAAE;iBAHzC,CA/VjB;;oBAoWQuL,WAAW,CAACyE,MAAhB,EAAwB;kBACtB5Q,IAAI,CAACf,IAAL,CAAU;oBACRwB,MAAM,EAAE0L,WAAW,CAACyE,MADZ;oBAERjQ,QAAQ,EAAE,KAFF;oBAGRC,WAAW,EAAE;mBAHf;;;kDAMK,IAAIzB,sBAAJ,CAA2B;kBAChCa,IAAI,EAAJA,IADgC;kBAEhCa,SAAS,EAAE,KAAKA,SAFgB;kBAGhCzC,IAAI,EAAJA;iBAHK,CA3WX;;;;;;;;;;;;;;;;;;;;;;;;;;;uCA2XI+H,KA3XJ,EA4XI3C,OA5XJ,EA6XIgO,QA7XJ,EA8XIhH,MA9XJ,EA+X4B;UAClB8C,UAAU,GAAG3P,mBAAA,CAAoB,CACrCA,gBAAA,CAAiB,aAAjB,CADqC,EAErCoE,MAAA,CAAc,QAAd,CAFqC,CAApB,CAAnB;UAKM3D,IAAI,GAAG3B,MAAM,CAACG,KAAP,CAAa0Q,UAAU,CAACC,IAAxB,CAAb;MACAD,UAAU,CAACjR,MAAX,CACE;QACEiE,WAAW,EAAE,CADf;;QAEEkK,MAAM,EAAE,IAAI2F,WAAJ,CAAgB3F,MAAhB,EAAwBlO,QAAxB;OAHZ,EAKE8B,IALF;aAQO,IAAIe,sBAAJ,CAA2B;QAChCa,IAAI,EAAE,CACJ;UAACS,MAAM,EAAE0F,KAAT;UAAgBxF,QAAQ,EAAE,IAA1B;UAAgCC,WAAW,EAAE;SADzC,EAEJ;UAACH,MAAM,EAAE+C,OAAT;UAAkB7C,QAAQ,EAAE,KAA5B;UAAmCC,WAAW,EAAE;SAF5C,EAGJ;UAACH,MAAM,EAAE+Q,QAAT;UAAmB7Q,QAAQ,EAAE,KAA7B;UAAoCC,WAAW,EAAE;SAH7C,CAD0B;QAMhCC,SAAS,EAAE,KAAKA,SANgB;QAOhCzC,IAAI,EAAJA;OAPK,CAAP;;;;;;;;;;;;sCAmBA+H,KAjaJ,EAkaI3C,OAlaJ,EAmaIgO,QAnaJ,EAoa4B;aACjB,KAAKC,kBAAL,CAAwBtL,KAAxB,EAA+B3C,OAA/B,EAAwCgO,QAAxC,EAAkD,CAAlD,CAAP;;;;;;;;;;;;wCAWArL,KAhbJ,EAibI3C,OAjbJ,EAkbImO,QAlbJ,EAmb4B;UAClBrE,UAAU,GAAG3P,mBAAA,CAAoB,CAACA,gBAAA,CAAiB,aAAjB,CAAD,CAApB,CAAnB;UAEMS,IAAI,GAAG3B,MAAM,CAACG,KAAP,CAAa0Q,UAAU,CAACC,IAAxB,CAAb;MACAD,UAAU,CAACjR,MAAX,CACE;QACEiE,WAAW,EAAE,CADf;;OADF,EAIElC,IAJF;aAOO,IAAIe,sBAAJ,CAA2B;QAChCa,IAAI,EAAE,CACJ;UAACS,MAAM,EAAE0F,KAAT;UAAgBxF,QAAQ,EAAE,IAA1B;UAAgCC,WAAW,EAAE;SADzC,EAEJ;UAACH,MAAM,EAAE+C,OAAT;UAAkB7C,QAAQ,EAAE,KAA5B;UAAmCC,WAAW,EAAE;SAF5C,EAGJ;UAACH,MAAM,EAAEkR,QAAT;UAAmBhR,QAAQ,EAAE,KAA7B;UAAoCC,WAAW,EAAE;SAH7C,CAD0B;QAMhCC,SAAS,EAAE,KAAKA,SANgB;QAOhCzC,IAAI,EAAJA;OAPK,CAAP;;;;;;;iDAlZAkO,UA5CJ,EA6CInG,KA7CJ,EA8CI8K,MA9CJ,EA+CIY,IA/CJ,EAgDIC,MAhDJ,EAiDIC,QAjDJ;;;;;;;;;;;;;;gBAkDIlR,SAlDJ,8DAkD2B4P,uBAlD3B;gBAoDUI,YApDV,GAoDyB,IAAI5T,OAAJ,EApDzB;gBAqDU0T,KArDV,GAqDkB,IAAID,KAAJ,CAAUpE,UAAV,EAAsBuE,YAAY,CAAC1U,SAAnC,EAA8C0E,SAA9C,CArDlB;;uBAsD0C8P,KAAK,CAACvD,UAAN,CAAiBjH,KAAjB,EAAwB,IAAxB,CAtD1C;;;gBAsDU6L,uBAtDV;gBA0DU1E,UA1DV,GA0DuB3P,mBAAA,CAAoB,CACrCA,gBAAA,CAAiB,aAAjB,CADqC,EAErCoE,MAAA,CAAc,QAAd,CAFqC,EAGrCpE,eAAA,CAAgB,UAAhB,CAHqC,EAIrCoE,UAAA,CAAkB,MAAlB,CAJqC,EAKrCA,UAAA,CAAkB,QAAlB,CALqC,CAApB,CA1DvB;gBAkEQ3D,IAlER,GAkEe3B,MAAM,CAACG,KAAP,CAAa,IAAb,CAlEf;gBAoEYmC,YApEZ,GAoE2BuO,UAAU,CAACjR,MAAX,CACnB;kBACEiE,WAAW,EAAE,CADf;;kBAEE2Q,MAAM,EAAEA,MAAM,CAAC3U,QAAP,EAFV;kBAGEyV,QAAQ,EAARA,QAHF;kBAIEF,IAAI,EAAJA,IAJF;kBAKEC,MAAM,EAANA;iBANiB,EAQnB1T,IARmB,CApE3B;gBA8EMA,IAAI,GAAGA,IAAI,CAACyD,KAAL,CAAW,CAAX,EAAc9C,YAAd,CAAP;;gBAIFiD,WAAW,GAAGmL,aAAa,CAACS,aAAd,CACZzH,KAAK,CAAChK,SADM,EAEZ0U,YAAY,CAAC1U,SAFD,EAGZ,CAHY,EAIZ,IAAIiC,IAAI,CAAC1B,MAJG,EAKZmE,SALY,CAAd;;uBAOMwL,yBAAyB,CAACC,UAAD,EAAatK,WAAb,EAA0BmE,KAA1B,CAzFnC;;;gBA2FInE,WAAW,GAAG,IAAIzC,WAAJ,GAAkBiO,GAAlB,CAAsB;kBAClCxN,IAAI,EAAE,CACJ;oBAACS,MAAM,EAAEoQ,YAAY,CAAC1U,SAAtB;oBAAiCwE,QAAQ,EAAE,IAA3C;oBAAiDC,WAAW,EAAE;mBAD1D,EAEJ;oBAACH,MAAM,EAAEuR,uBAAT;oBAAkCrR,QAAQ,EAAE,KAA5C;oBAAmDC,WAAW,EAAE;mBAF5D,CAD4B;kBAKlCC,SAAS,EAATA,SALkC;kBAMlCzC,IAAI,EAAJA;iBANY,CAAd;;uBAQMiO,yBAAyB,CAC7BC,UAD6B,EAE7BtK,WAF6B,EAG7BmE,KAH6B,EAI7B0K,YAJ6B,CAnGnC;;;kDA0GW,CAACF,KAAD,EAAQqB,uBAAR,CA1GX;;;;;;;;;;;;;;;;;;;;;AC3IA;;;;AAGA,SAAsBC,4BAAtB;;;;;;;2BAAO,iBACL3F,UADK,EAELnB,cAFK;;;;;;YAICqB,KAJD,GAIS9B,IAAI,CAACK,GAAL,EAJT;;mBAKiBuB,UAAU,CAACpB,kBAAX,CAA8BC,cAA9B,CALjB;;;YAKD1L,SALC;;YAQDiN,MARC,GAQQ,IARR;YASDC,aATC,GASe,CATf;;;;mBAWYL,UAAU,CAACM,kBAAX,CAA8BnN,SAA9B,CAXZ;;;YAWHiN,MAXG;;iBAYCA,MAZD;;;;;;;;;mBAiBG1I,KAAK,CAAE,MAAMvG,sBAAP,GAAiCD,oBAAlC,CAjBR;;;kBAmBC,EAAEmP,aAAF,IAAmB,CAnBpB;;;;;YAoBKE,QApBL,GAoBgB,CAACnC,IAAI,CAACK,GAAL,KAAayB,KAAd,IAAuB,IApBvC;kBAqBK,IAAItQ,KAAJ,4BACgBuD,SADhB,oCACmDoN,QAAQ,CAACC,OAAT,CACrD,CADqD,CADnD,uBAGUC,IAAI,CAACC,SAAL,CAAeN,MAAf,CAHV,OArBL;;;;;;;kBA6BDA,MAAM,IAAI,QAAQA,MA7BjB;;;;;6CA8BIjN,SA9BJ;;;kBAiCC,IAAIvD,KAAJ,2BACeuD,SADf,sBACoCsN,IAAI,CAACC,SAAL,CAAeN,MAAf,CADpC,OAjCD;;;;;;;;;;;;;;ACNP;;;;AAGA,IAAMrE,QAAQ,GAAG;EACf6J,IAAI,EAAE,qCADS;EAEfC,IAAI,EAAE,qCAFS;EAGfC,MAAM,EAAE;CAHV;;;;;;AAUA,AAAO,SAASC,sBAAT,CAAgCC,OAAhC,EAA0D;MAC3D,CAACA,OAAL,EAAc;WACLjK,QAAQ,CAACkK,qBAAD,CAAf;;;MAGElK,QAAQ,CAACiK,OAAD,CAAZ,EAAuB;WACdjK,QAAQ,CAACiK,OAAD,CAAf;;;QAEI,IAAIpW,KAAJ,4BAA8BoW,OAA9B,EAAN;;;;;;;;;;;;;;;;;;;"}